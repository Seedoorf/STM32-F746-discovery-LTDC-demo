
ubuntuLTDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f78  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002140  08002140  00012140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002150  08002150  00012150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002158  08002158  00012158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800215c  0800215c  0001215c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08002160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0003fcd8  2000000c  0800216c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  2003fce4  0800216c  0002fce4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000a47e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001c14  00000000  00000000  0002a4ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000034d0  00000000  00000000  0002c0ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000648  00000000  00000000  0002f5a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a08  00000000  00000000  0002fbe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000041b2  00000000  00000000  000305f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002c09  00000000  00000000  000347a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000373ab  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000115c  00000000  00000000  00037428  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08002128 	.word	0x08002128

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08002128 	.word	0x08002128

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b97a 	b.w	8000514 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	468c      	mov	ip, r1
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	9e08      	ldr	r6, [sp, #32]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d151      	bne.n	80002ec <__udivmoddi4+0xb4>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d96d      	bls.n	800032a <__udivmoddi4+0xf2>
 800024e:	fab2 fe82 	clz	lr, r2
 8000252:	f1be 0f00 	cmp.w	lr, #0
 8000256:	d00b      	beq.n	8000270 <__udivmoddi4+0x38>
 8000258:	f1ce 0c20 	rsb	ip, lr, #32
 800025c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000260:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000264:	fa02 f70e 	lsl.w	r7, r2, lr
 8000268:	ea4c 0c05 	orr.w	ip, ip, r5
 800026c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000270:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000274:	0c25      	lsrs	r5, r4, #16
 8000276:	fbbc f8fa 	udiv	r8, ip, sl
 800027a:	fa1f f987 	uxth.w	r9, r7
 800027e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000282:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000286:	fb08 f309 	mul.w	r3, r8, r9
 800028a:	42ab      	cmp	r3, r5
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x6c>
 800028e:	19ed      	adds	r5, r5, r7
 8000290:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000294:	f080 8123 	bcs.w	80004de <__udivmoddi4+0x2a6>
 8000298:	42ab      	cmp	r3, r5
 800029a:	f240 8120 	bls.w	80004de <__udivmoddi4+0x2a6>
 800029e:	f1a8 0802 	sub.w	r8, r8, #2
 80002a2:	443d      	add	r5, r7
 80002a4:	1aed      	subs	r5, r5, r3
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb5 f0fa 	udiv	r0, r5, sl
 80002ac:	fb0a 5510 	mls	r5, sl, r0, r5
 80002b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b4:	fb00 f909 	mul.w	r9, r0, r9
 80002b8:	45a1      	cmp	r9, r4
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x98>
 80002bc:	19e4      	adds	r4, r4, r7
 80002be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c2:	f080 810a 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80002c6:	45a1      	cmp	r9, r4
 80002c8:	f240 8107 	bls.w	80004da <__udivmoddi4+0x2a2>
 80002cc:	3802      	subs	r0, #2
 80002ce:	443c      	add	r4, r7
 80002d0:	eba4 0409 	sub.w	r4, r4, r9
 80002d4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d8:	2100      	movs	r1, #0
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d061      	beq.n	80003a2 <__udivmoddi4+0x16a>
 80002de:	fa24 f40e 	lsr.w	r4, r4, lr
 80002e2:	2300      	movs	r3, #0
 80002e4:	6034      	str	r4, [r6, #0]
 80002e6:	6073      	str	r3, [r6, #4]
 80002e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xc8>
 80002f0:	2e00      	cmp	r6, #0
 80002f2:	d054      	beq.n	800039e <__udivmoddi4+0x166>
 80002f4:	2100      	movs	r1, #0
 80002f6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002fa:	4608      	mov	r0, r1
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	fab3 f183 	clz	r1, r3
 8000304:	2900      	cmp	r1, #0
 8000306:	f040 808e 	bne.w	8000426 <__udivmoddi4+0x1ee>
 800030a:	42ab      	cmp	r3, r5
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xdc>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80fa 	bhi.w	8000508 <__udivmoddi4+0x2d0>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb65 0503 	sbc.w	r5, r5, r3
 800031a:	2001      	movs	r0, #1
 800031c:	46ac      	mov	ip, r5
 800031e:	2e00      	cmp	r6, #0
 8000320:	d03f      	beq.n	80003a2 <__udivmoddi4+0x16a>
 8000322:	e886 1010 	stmia.w	r6, {r4, ip}
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	b912      	cbnz	r2, 8000332 <__udivmoddi4+0xfa>
 800032c:	2701      	movs	r7, #1
 800032e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000332:	fab7 fe87 	clz	lr, r7
 8000336:	f1be 0f00 	cmp.w	lr, #0
 800033a:	d134      	bne.n	80003a6 <__udivmoddi4+0x16e>
 800033c:	1beb      	subs	r3, r5, r7
 800033e:	0c3a      	lsrs	r2, r7, #16
 8000340:	fa1f fc87 	uxth.w	ip, r7
 8000344:	2101      	movs	r1, #1
 8000346:	fbb3 f8f2 	udiv	r8, r3, r2
 800034a:	0c25      	lsrs	r5, r4, #16
 800034c:	fb02 3318 	mls	r3, r2, r8, r3
 8000350:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000354:	fb0c f308 	mul.w	r3, ip, r8
 8000358:	42ab      	cmp	r3, r5
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x134>
 800035c:	19ed      	adds	r5, r5, r7
 800035e:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x132>
 8000364:	42ab      	cmp	r3, r5
 8000366:	f200 80d1 	bhi.w	800050c <__udivmoddi4+0x2d4>
 800036a:	4680      	mov	r8, r0
 800036c:	1aed      	subs	r5, r5, r3
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb5 f0f2 	udiv	r0, r5, r2
 8000374:	fb02 5510 	mls	r5, r2, r0, r5
 8000378:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800037c:	fb0c fc00 	mul.w	ip, ip, r0
 8000380:	45a4      	cmp	ip, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x15c>
 8000384:	19e4      	adds	r4, r4, r7
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x15a>
 800038c:	45a4      	cmp	ip, r4
 800038e:	f200 80b8 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 040c 	sub.w	r4, r4, ip
 8000398:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800039c:	e79d      	b.n	80002da <__udivmoddi4+0xa2>
 800039e:	4631      	mov	r1, r6
 80003a0:	4630      	mov	r0, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	f1ce 0420 	rsb	r4, lr, #32
 80003aa:	fa05 f30e 	lsl.w	r3, r5, lr
 80003ae:	fa07 f70e 	lsl.w	r7, r7, lr
 80003b2:	fa20 f804 	lsr.w	r8, r0, r4
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa25 f404 	lsr.w	r4, r5, r4
 80003bc:	ea48 0803 	orr.w	r8, r8, r3
 80003c0:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c4:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c8:	fb02 4411 	mls	r4, r2, r1, r4
 80003cc:	fa1f fc87 	uxth.w	ip, r7
 80003d0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d4:	fb01 f30c 	mul.w	r3, r1, ip
 80003d8:	42ab      	cmp	r3, r5
 80003da:	fa00 f40e 	lsl.w	r4, r0, lr
 80003de:	d909      	bls.n	80003f4 <__udivmoddi4+0x1bc>
 80003e0:	19ed      	adds	r5, r5, r7
 80003e2:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003e6:	f080 808a 	bcs.w	80004fe <__udivmoddi4+0x2c6>
 80003ea:	42ab      	cmp	r3, r5
 80003ec:	f240 8087 	bls.w	80004fe <__udivmoddi4+0x2c6>
 80003f0:	3902      	subs	r1, #2
 80003f2:	443d      	add	r5, r7
 80003f4:	1aeb      	subs	r3, r5, r3
 80003f6:	fa1f f588 	uxth.w	r5, r8
 80003fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fe:	fb02 3310 	mls	r3, r2, r0, r3
 8000402:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000406:	fb00 f30c 	mul.w	r3, r0, ip
 800040a:	42ab      	cmp	r3, r5
 800040c:	d907      	bls.n	800041e <__udivmoddi4+0x1e6>
 800040e:	19ed      	adds	r5, r5, r7
 8000410:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000414:	d26f      	bcs.n	80004f6 <__udivmoddi4+0x2be>
 8000416:	42ab      	cmp	r3, r5
 8000418:	d96d      	bls.n	80004f6 <__udivmoddi4+0x2be>
 800041a:	3802      	subs	r0, #2
 800041c:	443d      	add	r5, r7
 800041e:	1aeb      	subs	r3, r5, r3
 8000420:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000424:	e78f      	b.n	8000346 <__udivmoddi4+0x10e>
 8000426:	f1c1 0720 	rsb	r7, r1, #32
 800042a:	fa22 f807 	lsr.w	r8, r2, r7
 800042e:	408b      	lsls	r3, r1
 8000430:	fa05 f401 	lsl.w	r4, r5, r1
 8000434:	ea48 0303 	orr.w	r3, r8, r3
 8000438:	fa20 fe07 	lsr.w	lr, r0, r7
 800043c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000440:	40fd      	lsrs	r5, r7
 8000442:	ea4e 0e04 	orr.w	lr, lr, r4
 8000446:	fbb5 f9fc 	udiv	r9, r5, ip
 800044a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000452:	fa1f f883 	uxth.w	r8, r3
 8000456:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800045a:	fb09 f408 	mul.w	r4, r9, r8
 800045e:	42ac      	cmp	r4, r5
 8000460:	fa02 f201 	lsl.w	r2, r2, r1
 8000464:	fa00 fa01 	lsl.w	sl, r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x244>
 800046a:	18ed      	adds	r5, r5, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000470:	d243      	bcs.n	80004fa <__udivmoddi4+0x2c2>
 8000472:	42ac      	cmp	r4, r5
 8000474:	d941      	bls.n	80004fa <__udivmoddi4+0x2c2>
 8000476:	f1a9 0902 	sub.w	r9, r9, #2
 800047a:	441d      	add	r5, r3
 800047c:	1b2d      	subs	r5, r5, r4
 800047e:	fa1f fe8e 	uxth.w	lr, lr
 8000482:	fbb5 f0fc 	udiv	r0, r5, ip
 8000486:	fb0c 5510 	mls	r5, ip, r0, r5
 800048a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048e:	fb00 f808 	mul.w	r8, r0, r8
 8000492:	45a0      	cmp	r8, r4
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x26e>
 8000496:	18e4      	adds	r4, r4, r3
 8000498:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800049c:	d229      	bcs.n	80004f2 <__udivmoddi4+0x2ba>
 800049e:	45a0      	cmp	r8, r4
 80004a0:	d927      	bls.n	80004f2 <__udivmoddi4+0x2ba>
 80004a2:	3802      	subs	r0, #2
 80004a4:	441c      	add	r4, r3
 80004a6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004aa:	eba4 0408 	sub.w	r4, r4, r8
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	454c      	cmp	r4, r9
 80004b4:	46c6      	mov	lr, r8
 80004b6:	464d      	mov	r5, r9
 80004b8:	d315      	bcc.n	80004e6 <__udivmoddi4+0x2ae>
 80004ba:	d012      	beq.n	80004e2 <__udivmoddi4+0x2aa>
 80004bc:	b156      	cbz	r6, 80004d4 <__udivmoddi4+0x29c>
 80004be:	ebba 030e 	subs.w	r3, sl, lr
 80004c2:	eb64 0405 	sbc.w	r4, r4, r5
 80004c6:	fa04 f707 	lsl.w	r7, r4, r7
 80004ca:	40cb      	lsrs	r3, r1
 80004cc:	431f      	orrs	r7, r3
 80004ce:	40cc      	lsrs	r4, r1
 80004d0:	6037      	str	r7, [r6, #0]
 80004d2:	6074      	str	r4, [r6, #4]
 80004d4:	2100      	movs	r1, #0
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	4618      	mov	r0, r3
 80004dc:	e6f8      	b.n	80002d0 <__udivmoddi4+0x98>
 80004de:	4690      	mov	r8, r2
 80004e0:	e6e0      	b.n	80002a4 <__udivmoddi4+0x6c>
 80004e2:	45c2      	cmp	sl, r8
 80004e4:	d2ea      	bcs.n	80004bc <__udivmoddi4+0x284>
 80004e6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ea:	eb69 0503 	sbc.w	r5, r9, r3
 80004ee:	3801      	subs	r0, #1
 80004f0:	e7e4      	b.n	80004bc <__udivmoddi4+0x284>
 80004f2:	4628      	mov	r0, r5
 80004f4:	e7d7      	b.n	80004a6 <__udivmoddi4+0x26e>
 80004f6:	4640      	mov	r0, r8
 80004f8:	e791      	b.n	800041e <__udivmoddi4+0x1e6>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e7be      	b.n	800047c <__udivmoddi4+0x244>
 80004fe:	4601      	mov	r1, r0
 8000500:	e778      	b.n	80003f4 <__udivmoddi4+0x1bc>
 8000502:	3802      	subs	r0, #2
 8000504:	443c      	add	r4, r7
 8000506:	e745      	b.n	8000394 <__udivmoddi4+0x15c>
 8000508:	4608      	mov	r0, r1
 800050a:	e708      	b.n	800031e <__udivmoddi4+0xe6>
 800050c:	f1a8 0802 	sub.w	r8, r8, #2
 8000510:	443d      	add	r5, r7
 8000512:	e72b      	b.n	800036c <__udivmoddi4+0x134>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000518:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <HAL_InitTick+0x3c>)
 800051a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800051e:	490e      	ldr	r1, [pc, #56]	; (8000558 <HAL_InitTick+0x40>)
 8000520:	7812      	ldrb	r2, [r2, #0]
 8000522:	fbb3 f3f2 	udiv	r3, r3, r2
{
 8000526:	b510      	push	{r4, lr}
 8000528:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800052a:	6808      	ldr	r0, [r1, #0]
 800052c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000530:	f000 f894 	bl	800065c <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000534:	b958      	cbnz	r0, 800054e <HAL_InitTick+0x36>
 8000536:	2c0f      	cmp	r4, #15
 8000538:	d809      	bhi.n	800054e <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800053a:	2200      	movs	r2, #0
 800053c:	4621      	mov	r1, r4
 800053e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000542:	f000 f851 	bl	80005e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000546:	4b05      	ldr	r3, [pc, #20]	; (800055c <HAL_InitTick+0x44>)
 8000548:	2000      	movs	r0, #0
 800054a:	601c      	str	r4, [r3, #0]
 800054c:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_ERROR;
 800054e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8000550:	bd10      	pop	{r4, pc}
 8000552:	bf00      	nop
 8000554:	20000000 	.word	0x20000000
 8000558:	20000008 	.word	0x20000008
 800055c:	20000004 	.word	0x20000004

08000560 <HAL_Init>:
{
 8000560:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000562:	2003      	movs	r0, #3
 8000564:	f000 f82c 	bl	80005c0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000568:	2000      	movs	r0, #0
 800056a:	f7ff ffd5 	bl	8000518 <HAL_InitTick>
  HAL_MspInit();
 800056e:	f001 fc93 	bl	8001e98 <HAL_MspInit>
}
 8000572:	2000      	movs	r0, #0
 8000574:	bd08      	pop	{r3, pc}
 8000576:	bf00      	nop

08000578 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000578:	4a03      	ldr	r2, [pc, #12]	; (8000588 <HAL_IncTick+0x10>)
 800057a:	4b04      	ldr	r3, [pc, #16]	; (800058c <HAL_IncTick+0x14>)
 800057c:	6811      	ldr	r1, [r2, #0]
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	440b      	add	r3, r1
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	2003fc28 	.word	0x2003fc28
 800058c:	20000000 	.word	0x20000000

08000590 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000590:	4b01      	ldr	r3, [pc, #4]	; (8000598 <HAL_GetTick+0x8>)
 8000592:	6818      	ldr	r0, [r3, #0]
}
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	2003fc28 	.word	0x2003fc28

0800059c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800059c:	b538      	push	{r3, r4, r5, lr}
 800059e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005a0:	f7ff fff6 	bl	8000590 <HAL_GetTick>
 80005a4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005a6:	1c63      	adds	r3, r4, #1
 80005a8:	d002      	beq.n	80005b0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80005aa:	4b04      	ldr	r3, [pc, #16]	; (80005bc <HAL_Delay+0x20>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005b0:	f7ff ffee 	bl	8000590 <HAL_GetTick>
 80005b4:	1b40      	subs	r0, r0, r5
 80005b6:	4284      	cmp	r4, r0
 80005b8:	d8fa      	bhi.n	80005b0 <HAL_Delay+0x14>
  {
  }
}
 80005ba:	bd38      	pop	{r3, r4, r5, pc}
 80005bc:	20000000 	.word	0x20000000

080005c0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005c0:	4907      	ldr	r1, [pc, #28]	; (80005e0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005c2:	0200      	lsls	r0, r0, #8
 80005c4:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005c6:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005c8:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005cc:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ce:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 80005d2:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80005d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80005d8:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005da:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 80005dc:	60c8      	str	r0, [r1, #12]
 80005de:	4770      	bx	lr
 80005e0:	e000ed00 	.word	0xe000ed00
 80005e4:	05fa0000 	.word	0x05fa0000

080005e8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005e8:	4b19      	ldr	r3, [pc, #100]	; (8000650 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005ea:	b470      	push	{r4, r5, r6}
 80005ec:	68dc      	ldr	r4, [r3, #12]
 80005ee:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005f2:	f1c4 0607 	rsb	r6, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f6:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005f8:	2e04      	cmp	r6, #4
 80005fa:	bf28      	it	cs
 80005fc:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005fe:	2b06      	cmp	r3, #6
 8000600:	d919      	bls.n	8000636 <HAL_NVIC_SetPriority+0x4e>
 8000602:	3c03      	subs	r4, #3
 8000604:	2501      	movs	r5, #1
 8000606:	40a5      	lsls	r5, r4
 8000608:	3d01      	subs	r5, #1
 800060a:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800060c:	2301      	movs	r3, #1
  if ((int32_t)(IRQn) >= 0)
 800060e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000610:	fa03 f306 	lsl.w	r3, r3, r6
 8000614:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000618:	ea01 0103 	and.w	r1, r1, r3
 800061c:	fa01 f104 	lsl.w	r1, r1, r4
 8000620:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000624:	db0a      	blt.n	800063c <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000626:	0109      	lsls	r1, r1, #4
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <HAL_NVIC_SetPriority+0x6c>)
 800062a:	b2c9      	uxtb	r1, r1
 800062c:	4403      	add	r3, r0
 800062e:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000632:	bc70      	pop	{r4, r5, r6}
 8000634:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000636:	2200      	movs	r2, #0
 8000638:	4614      	mov	r4, r2
 800063a:	e7e7      	b.n	800060c <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063c:	f000 000f 	and.w	r0, r0, #15
 8000640:	0109      	lsls	r1, r1, #4
 8000642:	4b05      	ldr	r3, [pc, #20]	; (8000658 <HAL_NVIC_SetPriority+0x70>)
 8000644:	b2c9      	uxtb	r1, r1
 8000646:	4403      	add	r3, r0
 8000648:	7619      	strb	r1, [r3, #24]
 800064a:	bc70      	pop	{r4, r5, r6}
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	e000ed00 	.word	0xe000ed00
 8000654:	e000e100 	.word	0xe000e100
 8000658:	e000ecfc 	.word	0xe000ecfc

0800065c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800065c:	3801      	subs	r0, #1
 800065e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000662:	d20d      	bcs.n	8000680 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000666:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000668:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800066a:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066c:	25f0      	movs	r5, #240	; 0xf0
 800066e:	4c06      	ldr	r4, [pc, #24]	; (8000688 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000670:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000672:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000674:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800067a:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 800067c:	bc30      	pop	{r4, r5}
 800067e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000680:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8000682:	4770      	bx	lr
 8000684:	e000e010 	.word	0xe000e010
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800068c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000690:	4a04      	ldr	r2, [pc, #16]	; (80006a4 <HAL_MPU_Disable+0x18>)
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000692:	2000      	movs	r0, #0
 8000694:	4904      	ldr	r1, [pc, #16]	; (80006a8 <HAL_MPU_Disable+0x1c>)
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000696:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000698:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800069c:	6253      	str	r3, [r2, #36]	; 0x24
  MPU->CTRL = 0;
 800069e:	6048      	str	r0, [r1, #4]
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	e000ed00 	.word	0xe000ed00
 80006a8:	e000ed90 	.word	0xe000ed90

080006ac <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80006ac:	4a06      	ldr	r2, [pc, #24]	; (80006c8 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80006ae:	f040 0001 	orr.w	r0, r0, #1
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <HAL_MPU_Enable+0x20>)
 80006b4:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80006b6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80006b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006bc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80006be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80006c2:	f3bf 8f6f 	isb	sy
 80006c6:	4770      	bx	lr
 80006c8:	e000ed00 	.word	0xe000ed00
 80006cc:	e000ed90 	.word	0xe000ed90

080006d0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80006d0:	b4f0      	push	{r4, r5, r6, r7}
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80006d2:	4913      	ldr	r1, [pc, #76]	; (8000720 <HAL_MPU_ConfigRegion+0x50>)
 80006d4:	7843      	ldrb	r3, [r0, #1]
 80006d6:	608b      	str	r3, [r1, #8]

  if ((MPU_Init->Enable) != RESET)
 80006d8:	7804      	ldrb	r4, [r0, #0]
 80006da:	b91c      	cbnz	r4, 80006e4 <HAL_MPU_ConfigRegion+0x14>
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 80006dc:	60cc      	str	r4, [r1, #12]
    MPU->RASR = 0x00;
 80006de:	610c      	str	r4, [r1, #16]
  }
}
 80006e0:	bcf0      	pop	{r4, r5, r6, r7}
 80006e2:	4770      	bx	lr
    MPU->RBAR = MPU_Init->BaseAddress;
 80006e4:	6843      	ldr	r3, [r0, #4]
 80006e6:	60cb      	str	r3, [r1, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80006e8:	7ac2      	ldrb	r2, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80006ea:	7b05      	ldrb	r5, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80006ec:	0612      	lsls	r2, r2, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80006ee:	7a83      	ldrb	r3, [r0, #10]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80006f0:	7b47      	ldrb	r7, [r0, #13]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80006f2:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80006f6:	7b86      	ldrb	r6, [r0, #14]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80006f8:	7bc5      	ldrb	r5, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80006fa:	4322      	orrs	r2, r4
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80006fc:	7a44      	ldrb	r4, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80006fe:	7a00      	ldrb	r0, [r0, #8]
 8000700:	ea42 43c3 	orr.w	r3, r2, r3, lsl #19
 8000704:	ea43 4387 	orr.w	r3, r3, r7, lsl #18
 8000708:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 800070c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8000710:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8000714:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
}
 8000718:	bcf0      	pop	{r4, r5, r6, r7}
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800071a:	610b      	str	r3, [r1, #16]
}
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	e000ed90 	.word	0xe000ed90

08000724 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000728:	f8d1 c000 	ldr.w	ip, [r1]
 800072c:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800072e:	2500      	movs	r5, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000730:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8000960 <HAL_GPIO_Init+0x23c>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000734:	f8df e22c 	ldr.w	lr, [pc, #556]	; 8000964 <HAL_GPIO_Init+0x240>
 8000738:	e003      	b.n	8000742 <HAL_GPIO_Init+0x1e>
  for(position = 0; position < GPIO_NUMBER; position++)
 800073a:	3501      	adds	r5, #1
 800073c:	2d10      	cmp	r5, #16
 800073e:	f000 80bf 	beq.w	80008c0 <HAL_GPIO_Init+0x19c>
    ioposition = ((uint32_t)0x01) << position;
 8000742:	2301      	movs	r3, #1
 8000744:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000746:	ea03 020c 	and.w	r2, r3, ip
    if(iocurrent == ioposition)
 800074a:	4293      	cmp	r3, r2
 800074c:	d1f5      	bne.n	800073a <HAL_GPIO_Init+0x16>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800074e:	684e      	ldr	r6, [r1, #4]
 8000750:	f026 0910 	bic.w	r9, r6, #16
 8000754:	f1b9 0f02 	cmp.w	r9, #2
 8000758:	f040 80b5 	bne.w	80008c6 <HAL_GPIO_Init+0x1a2>
        temp = GPIOx->AFR[position >> 3];
 800075c:	ea4f 09d5 	mov.w	r9, r5, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000760:	f005 0a07 	and.w	sl, r5, #7
 8000764:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000768:	690c      	ldr	r4, [r1, #16]
 800076a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800076e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000772:	f8d9 7020 	ldr.w	r7, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000776:	fa0b fb0a 	lsl.w	fp, fp, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800077a:	fa04 f40a 	lsl.w	r4, r4, sl
 800077e:	ea4f 0a45 	mov.w	sl, r5, lsl #1
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000782:	ea27 070b 	bic.w	r7, r7, fp
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000786:	f04f 0b03 	mov.w	fp, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800078a:	433c      	orrs	r4, r7
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800078c:	fa0b fb0a 	lsl.w	fp, fp, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000790:	f006 0703 	and.w	r7, r6, #3
        GPIOx->AFR[position >> 3] = temp;
 8000794:	f8c9 4020 	str.w	r4, [r9, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000798:	ea6f 040b 	mvn.w	r4, fp
      temp = GPIOx->MODER;
 800079c:	f8d0 9000 	ldr.w	r9, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80007a0:	fa07 f70a 	lsl.w	r7, r7, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80007a4:	ea09 0904 	and.w	r9, r9, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80007a8:	ea47 0709 	orr.w	r7, r7, r9
      GPIOx->MODER = temp;
 80007ac:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 80007ae:	6887      	ldr	r7, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80007b0:	f3c6 1900 	ubfx	r9, r6, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80007b4:	ea07 0b04 	and.w	fp, r7, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 80007b8:	68cf      	ldr	r7, [r1, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80007ba:	fa09 f905 	lsl.w	r9, r9, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 80007be:	fa07 f70a 	lsl.w	r7, r7, sl
 80007c2:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 80007c6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80007c8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007ca:	ea27 0303 	bic.w	r3, r7, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80007ce:	ea49 0303 	orr.w	r3, r9, r3
        GPIOx->OTYPER = temp;
 80007d2:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 80007d4:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80007d6:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80007d8:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80007da:	fa03 f30a 	lsl.w	r3, r3, sl
 80007de:	4323      	orrs	r3, r4
      GPIOx->PUPDR = temp;
 80007e0:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007e2:	00f3      	lsls	r3, r6, #3
 80007e4:	d5a9      	bpl.n	800073a <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e6:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
 80007ea:	f025 0703 	bic.w	r7, r5, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80007ee:	f005 0303 	and.w	r3, r5, #3
 80007f2:	f04f 090f 	mov.w	r9, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f6:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80007fa:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80007fe:	009b      	lsls	r3, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000800:	f8c8 4044 	str.w	r4, [r8, #68]	; 0x44
 8000804:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000808:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800080c:	fa09 f903 	lsl.w	r9, r9, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000810:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 8000814:	9401      	str	r4, [sp, #4]
 8000816:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000818:	68bc      	ldr	r4, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800081a:	ea24 0a09 	bic.w	sl, r4, r9
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800081e:	4c4b      	ldr	r4, [pc, #300]	; (800094c <HAL_GPIO_Init+0x228>)
 8000820:	42a0      	cmp	r0, r4
 8000822:	d069      	beq.n	80008f8 <HAL_GPIO_Init+0x1d4>
 8000824:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000828:	42a0      	cmp	r0, r4
 800082a:	d067      	beq.n	80008fc <HAL_GPIO_Init+0x1d8>
 800082c:	4c48      	ldr	r4, [pc, #288]	; (8000950 <HAL_GPIO_Init+0x22c>)
 800082e:	42a0      	cmp	r0, r4
 8000830:	d069      	beq.n	8000906 <HAL_GPIO_Init+0x1e2>
 8000832:	4c48      	ldr	r4, [pc, #288]	; (8000954 <HAL_GPIO_Init+0x230>)
 8000834:	42a0      	cmp	r0, r4
 8000836:	d06b      	beq.n	8000910 <HAL_GPIO_Init+0x1ec>
 8000838:	4c47      	ldr	r4, [pc, #284]	; (8000958 <HAL_GPIO_Init+0x234>)
 800083a:	42a0      	cmp	r0, r4
 800083c:	d06d      	beq.n	800091a <HAL_GPIO_Init+0x1f6>
 800083e:	4c47      	ldr	r4, [pc, #284]	; (800095c <HAL_GPIO_Init+0x238>)
 8000840:	42a0      	cmp	r0, r4
 8000842:	d06f      	beq.n	8000924 <HAL_GPIO_Init+0x200>
 8000844:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8000968 <HAL_GPIO_Init+0x244>
 8000848:	4548      	cmp	r0, r9
 800084a:	d070      	beq.n	800092e <HAL_GPIO_Init+0x20a>
 800084c:	f8df 911c 	ldr.w	r9, [pc, #284]	; 800096c <HAL_GPIO_Init+0x248>
 8000850:	4548      	cmp	r0, r9
 8000852:	d071      	beq.n	8000938 <HAL_GPIO_Init+0x214>
 8000854:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8000970 <HAL_GPIO_Init+0x24c>
 8000858:	4548      	cmp	r0, r9
 800085a:	d072      	beq.n	8000942 <HAL_GPIO_Init+0x21e>
 800085c:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8000974 <HAL_GPIO_Init+0x250>
 8000860:	4548      	cmp	r0, r9
 8000862:	bf0c      	ite	eq
 8000864:	f04f 0909 	moveq.w	r9, #9
 8000868:	f04f 090a 	movne.w	r9, #10
 800086c:	fa09 f303 	lsl.w	r3, r9, r3
 8000870:	ea43 030a 	orr.w	r3, r3, sl
        temp &= ~((uint32_t)iocurrent);
 8000874:	43d4      	mvns	r4, r2
  for(position = 0; position < GPIO_NUMBER; position++)
 8000876:	3501      	adds	r5, #1
        SYSCFG->EXTICR[position >> 2] = temp;
 8000878:	60bb      	str	r3, [r7, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800087a:	03f7      	lsls	r7, r6, #15
        temp = EXTI->IMR;
 800087c:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8000880:	bf54      	ite	pl
 8000882:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8000884:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000886:	03b7      	lsls	r7, r6, #14
        EXTI->IMR = temp;
 8000888:	f8ce 3000 	str.w	r3, [lr]
        temp = EXTI->EMR;
 800088c:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 8000890:	bf54      	ite	pl
 8000892:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8000894:	4313      	orrmi	r3, r2
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000896:	02f7      	lsls	r7, r6, #11
        EXTI->EMR = temp;
 8000898:	f8ce 3004 	str.w	r3, [lr, #4]
        temp = EXTI->RTSR;
 800089c:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
 80008a0:	bf54      	ite	pl
 80008a2:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 80008a4:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008a6:	02b6      	lsls	r6, r6, #10
        EXTI->RTSR = temp;
 80008a8:	f8ce 3008 	str.w	r3, [lr, #8]
        temp = EXTI->FTSR;
 80008ac:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 80008b0:	bf54      	ite	pl
 80008b2:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 80008b4:	4313      	orrmi	r3, r2
  for(position = 0; position < GPIO_NUMBER; position++)
 80008b6:	2d10      	cmp	r5, #16
        }
        EXTI->FTSR = temp;
 80008b8:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80008bc:	f47f af41 	bne.w	8000742 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 80008c0:	b003      	add	sp, #12
 80008c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008c6:	ea4f 0a45 	mov.w	sl, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80008ca:	2403      	movs	r4, #3
      temp = GPIOx->MODER;
 80008cc:	f8d0 b000 	ldr.w	fp, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008d0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80008d4:	ea06 0704 	and.w	r7, r6, r4
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80008d8:	fa04 f40a 	lsl.w	r4, r4, sl
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008dc:	f1b9 0f01 	cmp.w	r9, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80008e0:	ea6f 0404 	mvn.w	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80008e4:	fa07 f70a 	lsl.w	r7, r7, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80008e8:	ea0b 0b04 	and.w	fp, fp, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80008ec:	ea47 070b 	orr.w	r7, r7, fp
      GPIOx->MODER = temp;
 80008f0:	6007      	str	r7, [r0, #0]
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008f2:	f63f af6f 	bhi.w	80007d4 <HAL_GPIO_Init+0xb0>
 80008f6:	e75a      	b.n	80007ae <HAL_GPIO_Init+0x8a>
 80008f8:	2300      	movs	r3, #0
 80008fa:	e7b9      	b.n	8000870 <HAL_GPIO_Init+0x14c>
 80008fc:	f04f 0901 	mov.w	r9, #1
 8000900:	fa09 f303 	lsl.w	r3, r9, r3
 8000904:	e7b4      	b.n	8000870 <HAL_GPIO_Init+0x14c>
 8000906:	f04f 0902 	mov.w	r9, #2
 800090a:	fa09 f303 	lsl.w	r3, r9, r3
 800090e:	e7af      	b.n	8000870 <HAL_GPIO_Init+0x14c>
 8000910:	f04f 0903 	mov.w	r9, #3
 8000914:	fa09 f303 	lsl.w	r3, r9, r3
 8000918:	e7aa      	b.n	8000870 <HAL_GPIO_Init+0x14c>
 800091a:	f04f 0904 	mov.w	r9, #4
 800091e:	fa09 f303 	lsl.w	r3, r9, r3
 8000922:	e7a5      	b.n	8000870 <HAL_GPIO_Init+0x14c>
 8000924:	f04f 0905 	mov.w	r9, #5
 8000928:	fa09 f303 	lsl.w	r3, r9, r3
 800092c:	e7a0      	b.n	8000870 <HAL_GPIO_Init+0x14c>
 800092e:	f04f 0906 	mov.w	r9, #6
 8000932:	fa09 f303 	lsl.w	r3, r9, r3
 8000936:	e79b      	b.n	8000870 <HAL_GPIO_Init+0x14c>
 8000938:	f04f 0907 	mov.w	r9, #7
 800093c:	fa09 f303 	lsl.w	r3, r9, r3
 8000940:	e796      	b.n	8000870 <HAL_GPIO_Init+0x14c>
 8000942:	f04f 0908 	mov.w	r9, #8
 8000946:	fa09 f303 	lsl.w	r3, r9, r3
 800094a:	e791      	b.n	8000870 <HAL_GPIO_Init+0x14c>
 800094c:	40020000 	.word	0x40020000
 8000950:	40020800 	.word	0x40020800
 8000954:	40020c00 	.word	0x40020c00
 8000958:	40021000 	.word	0x40021000
 800095c:	40021400 	.word	0x40021400
 8000960:	40023800 	.word	0x40023800
 8000964:	40013c00 	.word	0x40013c00
 8000968:	40021800 	.word	0x40021800
 800096c:	40021c00 	.word	0x40021c00
 8000970:	40022000 	.word	0x40022000
 8000974:	40022400 	.word	0x40022400

08000978 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000978:	b902      	cbnz	r2, 800097c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800097a:	0409      	lsls	r1, r1, #16
 800097c:	6181      	str	r1, [r0, #24]
 800097e:	4770      	bx	lr

08000980 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8000980:	01d2      	lsls	r2, r2, #7

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8000982:	f04f 0c00 	mov.w	ip, #0
{
 8000986:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800098a:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800098c:	6804      	ldr	r4, [r0, #0]
 800098e:	6848      	ldr	r0, [r1, #4]
 8000990:	68e7      	ldr	r7, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8000992:	18a3      	adds	r3, r4, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8000994:	f8d1 e000 	ldr.w	lr, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8000998:	685e      	ldr	r6, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800099a:	f3c7 470b 	ubfx	r7, r7, #16, #12
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800099e:	f8d1 900c 	ldr.w	r9, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80009a2:	f10e 0801 	add.w	r8, lr, #1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80009a6:	eb07 0a00 	add.w	sl, r7, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80009aa:	f406 4770 	and.w	r7, r6, #61440	; 0xf000
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80009ae:	688d      	ldr	r5, [r1, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80009b0:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80009b2:	605f      	str	r7, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80009b4:	3501      	adds	r5, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80009b6:	68e7      	ldr	r7, [r4, #12]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80009b8:	f8d1 b018 	ldr.w	fp, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80009bc:	f3c7 470b 	ubfx	r7, r7, #16, #12
 80009c0:	4447      	add	r7, r8
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80009c2:	f8d1 8014 	ldr.w	r8, [r1, #20]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80009c6:	ea47 470a 	orr.w	r7, r7, sl, lsl #16
 80009ca:	605f      	str	r7, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80009cc:	f8d4 a00c 	ldr.w	sl, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80009d0:	689f      	ldr	r7, [r3, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80009d2:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80009d6:	f407 4770 	and.w	r7, r7, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80009da:	44d1      	add	r9, sl
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80009dc:	609f      	str	r7, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80009de:	68e7      	ldr	r7, [r4, #12]
 80009e0:	f3c7 0a0a 	ubfx	sl, r7, #0, #11

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80009e4:	4f2c      	ldr	r7, [pc, #176]	; (8000a98 <LTDC_SetConfig+0x118>)
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80009e6:	4455      	add	r5, sl
 80009e8:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 80009ec:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80009ee:	691d      	ldr	r5, [r3, #16]
 80009f0:	f025 0507 	bic.w	r5, r5, #7
 80009f4:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80009f6:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80009f8:	699d      	ldr	r5, [r3, #24]
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80009fa:	f891 a031 	ldrb.w	sl, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80009fe:	f891 9032 	ldrb.w	r9, [r1, #50]	; 0x32
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8000a02:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8000a06:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8000a0a:	ea45 650b 	orr.w	r5, r5, fp, lsl #24
 8000a0e:	ea45 250a 	orr.w	r5, r5, sl, lsl #8
 8000a12:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8000a16:	619d      	str	r5, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8000a18:	695d      	ldr	r5, [r3, #20]
 8000a1a:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8000a1e:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8000a20:	f8c3 8014 	str.w	r8, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8000a24:	69dd      	ldr	r5, [r3, #28]
 8000a26:	402f      	ands	r7, r5
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8000a28:	f101 051c 	add.w	r5, r1, #28
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8000a2c:	61df      	str	r7, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8000a2e:	e895 01a0 	ldmia.w	r5, {r5, r7, r8}
 8000a32:	433d      	orrs	r5, r7
 8000a34:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8000a36:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8000a38:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8000a3c:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8000a40:	b326      	cbz	r6, 8000a8c <LTDC_SetConfig+0x10c>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8000a42:	2e01      	cmp	r6, #1
 8000a44:	d024      	beq.n	8000a90 <LTDC_SetConfig+0x110>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8000a46:	1eb5      	subs	r5, r6, #2
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8000a48:	2d02      	cmp	r5, #2
 8000a4a:	d923      	bls.n	8000a94 <LTDC_SetConfig+0x114>
 8000a4c:	2e07      	cmp	r6, #7
 8000a4e:	d021      	beq.n	8000a94 <LTDC_SetConfig+0x114>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8000a50:	2701      	movs	r7, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8000a52:	eba0 000e 	sub.w	r0, r0, lr
 8000a56:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8000a58:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8000a5a:	fb07 f000 	mul.w	r0, r7, r0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8000a5e:	f8d1 e02c 	ldr.w	lr, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8000a62:	fb06 f607 	mul.w	r6, r6, r7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8000a66:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8000a6a:	3003      	adds	r0, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8000a6c:	490b      	ldr	r1, [pc, #44]	; (8000a9c <LTDC_SetConfig+0x11c>)
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8000a6e:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8000a70:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a74:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8000a76:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000a78:	4001      	ands	r1, r0
 8000a7a:	6319      	str	r1, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8000a7c:	f8c3 e030 	str.w	lr, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8000a80:	58a3      	ldr	r3, [r4, r2]
 8000a82:	f043 0301 	orr.w	r3, r3, #1
 8000a86:	50a3      	str	r3, [r4, r2]
 8000a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp = 4U;
 8000a8c:	2704      	movs	r7, #4
 8000a8e:	e7e0      	b.n	8000a52 <LTDC_SetConfig+0xd2>
    tmp = 3U;
 8000a90:	2703      	movs	r7, #3
 8000a92:	e7de      	b.n	8000a52 <LTDC_SetConfig+0xd2>
    tmp = 2U;
 8000a94:	2702      	movs	r7, #2
 8000a96:	e7dc      	b.n	8000a52 <LTDC_SetConfig+0xd2>
 8000a98:	fffff8f8 	.word	0xfffff8f8
 8000a9c:	fffff800 	.word	0xfffff800

08000aa0 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8000aa0:	2800      	cmp	r0, #0
 8000aa2:	d071      	beq.n	8000b88 <HAL_LTDC_Init+0xe8>
{
 8000aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8000aa6:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8000aaa:	4604      	mov	r4, r0
 8000aac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d064      	beq.n	8000b7e <HAL_LTDC_Init+0xde>
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8000ab4:	6823      	ldr	r3, [r4, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8000ab6:	2602      	movs	r6, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8000ab8:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_READY;
 8000aba:	2501      	movs	r5, #1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8000abc:	6862      	ldr	r2, [r4, #4]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8000abe:	2100      	movs	r1, #0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8000ac0:	f884 60a1 	strb.w	r6, [r4, #161]	; 0xa1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8000ac4:	68e7      	ldr	r7, [r4, #12]
 8000ac6:	4302      	orrs	r2, r0
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8000ac8:	6998      	ldr	r0, [r3, #24]
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8000aca:	6926      	ldr	r6, [r4, #16]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8000acc:	433a      	orrs	r2, r7
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8000ace:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8000ad2:	f8d4 e014 	ldr.w	lr, [r4, #20]
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8000ad6:	4332      	orrs	r2, r6
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8000ad8:	f8d4 c018 	ldr.w	ip, [r4, #24]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8000adc:	6198      	str	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8000ade:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8000ae0:	4f2a      	ldr	r7, [pc, #168]	; (8000b8c <HAL_LTDC_Init+0xec>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8000ae2:	4302      	orrs	r2, r0
  return HAL_OK;
 8000ae4:	4608      	mov	r0, r1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8000ae6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8000ae8:	689a      	ldr	r2, [r3, #8]
 8000aea:	403a      	ands	r2, r7
 8000aec:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8000aee:	689e      	ldr	r6, [r3, #8]
 8000af0:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8000af4:	f8d4 e01c 	ldr.w	lr, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8000af8:	ea46 060c 	orr.w	r6, r6, ip
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8000afc:	f8d4 c020 	ldr.w	ip, [r4, #32]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8000b00:	609e      	str	r6, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8000b02:	68de      	ldr	r6, [r3, #12]
 8000b04:	403e      	ands	r6, r7
 8000b06:	60de      	str	r6, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8000b08:	68da      	ldr	r2, [r3, #12]
 8000b0a:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8000b0e:	f8d4 e024 	ldr.w	lr, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8000b12:	ea42 020c 	orr.w	r2, r2, ip
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8000b16:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8000b1a:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8000b1c:	691a      	ldr	r2, [r3, #16]
 8000b1e:	403a      	ands	r2, r7
 8000b20:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8000b22:	691e      	ldr	r6, [r3, #16]
 8000b24:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
  tmp = (hltdc->Init.TotalWidth << 16U);
 8000b28:	f8d4 e02c 	ldr.w	lr, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8000b2c:	ea46 060c 	orr.w	r6, r6, ip
 8000b30:	611e      	str	r6, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8000b32:	695e      	ldr	r6, [r3, #20]
 8000b34:	4037      	ands	r7, r6
 8000b36:	615f      	str	r7, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8000b38:	695a      	ldr	r2, [r3, #20]
 8000b3a:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8000b3c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000b40:	4332      	orrs	r2, r6
 8000b42:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8000b44:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8000b46:	f894 e035 	ldrb.w	lr, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8000b4a:	f006 467f 	and.w	r6, r6, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8000b4e:	f894 7036 	ldrb.w	r7, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8000b52:	62de      	str	r6, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8000b54:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8000b56:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8000b5a:	4332      	orrs	r2, r6
 8000b5c:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
 8000b60:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b64:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8000b66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b68:	f042 0206 	orr.w	r2, r2, #6
 8000b6c:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8000b6e:	699a      	ldr	r2, [r3, #24]
 8000b70:	432a      	orrs	r2, r5
 8000b72:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8000b74:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8000b78:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  return HAL_OK;
 8000b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8000b7e:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8000b82:	f001 f9a1 	bl	8001ec8 <HAL_LTDC_MspInit>
 8000b86:	e795      	b.n	8000ab4 <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 8000b88:	2001      	movs	r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f000f800 	.word	0xf000f800

08000b90 <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 8000b90:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d101      	bne.n	8000b9c <HAL_LTDC_ConfigLayer+0xc>
 8000b98:	2002      	movs	r0, #2
 8000b9a:	4770      	bx	lr
{
 8000b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8000ba0:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 8000ba2:	f04f 0801 	mov.w	r8, #1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8000ba6:	2302      	movs	r3, #2
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8000ba8:	460d      	mov	r5, r1
 8000baa:	fb04 0402 	mla	r4, r4, r2, r0
 8000bae:	4606      	mov	r6, r0
  __HAL_LOCK(hltdc);
 8000bb0:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
 8000bb4:	4696      	mov	lr, r2
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8000bb6:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
 8000bba:	460f      	mov	r7, r1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8000bbc:	3438      	adds	r4, #56	; 0x38
 8000bbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bca:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8000bcc:	4672      	mov	r2, lr
 8000bce:	4630      	mov	r0, r6
 8000bd0:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8000bd2:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8000bd4:	f7ff fed4 	bl	8000980 <LTDC_SetConfig>
  __HAL_UNLOCK(hltdc);
 8000bd8:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8000bda:	6832      	ldr	r2, [r6, #0]
  return HAL_OK;
 8000bdc:	4618      	mov	r0, r3
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8000bde:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8000be2:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8000be6:	f886 30a0 	strb.w	r3, [r6, #160]	; 0xa0
  return HAL_OK;
 8000bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000bee:	bf00      	nop

08000bf0 <HAL_LTDC_SetAddress>:
{
 8000bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8000bf2:	f890 50a0 	ldrb.w	r5, [r0, #160]	; 0xa0
 8000bf6:	2d01      	cmp	r5, #1
 8000bf8:	d101      	bne.n	8000bfe <HAL_LTDC_SetAddress+0xe>
 8000bfa:	2002      	movs	r0, #2
}
 8000bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  pLayerCfg->FBStartAdress = Address;
 8000bfe:	2334      	movs	r3, #52	; 0x34
  __HAL_LOCK(hltdc);
 8000c00:	2701      	movs	r7, #1
 8000c02:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8000c04:	2102      	movs	r1, #2
  pLayerCfg->FBStartAdress = Address;
 8000c06:	fb03 f302 	mul.w	r3, r3, r2
 8000c0a:	4604      	mov	r4, r0
  __HAL_LOCK(hltdc);
 8000c0c:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
  pLayerCfg->FBStartAdress = Address;
 8000c10:	18c6      	adds	r6, r0, r3
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8000c12:	3338      	adds	r3, #56	; 0x38
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8000c14:	f880 10a1 	strb.w	r1, [r0, #161]	; 0xa1
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8000c18:	18c1      	adds	r1, r0, r3
  pLayerCfg->FBStartAdress = Address;
 8000c1a:	65f5      	str	r5, [r6, #92]	; 0x5c
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8000c1c:	f7ff feb0 	bl	8000980 <LTDC_SetConfig>
  __HAL_UNLOCK(hltdc);
 8000c20:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8000c22:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
 8000c24:	4618      	mov	r0, r3
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8000c26:	6257      	str	r7, [r2, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8000c28:	f884 70a1 	strb.w	r7, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8000c2c:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
  return HAL_OK;
 8000c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c32:	bf00      	nop

08000c34 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c34:	4a1b      	ldr	r2, [pc, #108]	; (8000ca4 <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000c36:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c38:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000c3a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 8000c3e:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c40:	6411      	str	r1, [r2, #64]	; 0x40
{
 8000c42:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c44:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000c46:	461c      	mov	r4, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c48:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000c4c:	9201      	str	r2, [sp, #4]
 8000c4e:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000c56:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000c58:	f7ff fc9a 	bl	8000590 <HAL_GetTick>
 8000c5c:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000c5e:	e005      	b.n	8000c6c <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000c60:	f7ff fc96 	bl	8000590 <HAL_GetTick>
 8000c64:	1b40      	subs	r0, r0, r5
 8000c66:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000c6a:	d817      	bhi.n	8000c9c <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000c6c:	6863      	ldr	r3, [r4, #4]
 8000c6e:	03da      	lsls	r2, r3, #15
 8000c70:	d5f6      	bpl.n	8000c60 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000c72:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000c74:	4d0c      	ldr	r5, [pc, #48]	; (8000ca8 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c7a:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8000c7c:	f7ff fc88 	bl	8000590 <HAL_GetTick>
 8000c80:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000c82:	e005      	b.n	8000c90 <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000c84:	f7ff fc84 	bl	8000590 <HAL_GetTick>
 8000c88:	1b00      	subs	r0, r0, r4
 8000c8a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000c8e:	d805      	bhi.n	8000c9c <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000c90:	686b      	ldr	r3, [r5, #4]
 8000c92:	039b      	lsls	r3, r3, #14
 8000c94:	d5f6      	bpl.n	8000c84 <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000c96:	2000      	movs	r0, #0
}
 8000c98:	b003      	add	sp, #12
 8000c9a:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8000c9c:	2003      	movs	r0, #3
}
 8000c9e:	b003      	add	sp, #12
 8000ca0:	bd30      	pop	{r4, r5, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40007000 	.word	0x40007000

08000cac <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cac:	2800      	cmp	r0, #0
 8000cae:	f000 81cf 	beq.w	8001050 <HAL_RCC_OscConfig+0x3a4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cb2:	6803      	ldr	r3, [r0, #0]
{
 8000cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cb8:	07dd      	lsls	r5, r3, #31
{
 8000cba:	b082      	sub	sp, #8
 8000cbc:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cbe:	d530      	bpl.n	8000d22 <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cc0:	49aa      	ldr	r1, [pc, #680]	; (8000f6c <HAL_RCC_OscConfig+0x2c0>)
 8000cc2:	688a      	ldr	r2, [r1, #8]
 8000cc4:	f002 020c 	and.w	r2, r2, #12
 8000cc8:	2a04      	cmp	r2, #4
 8000cca:	f000 8119 	beq.w	8000f00 <HAL_RCC_OscConfig+0x254>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cce:	688a      	ldr	r2, [r1, #8]
 8000cd0:	f002 020c 	and.w	r2, r2, #12
 8000cd4:	2a08      	cmp	r2, #8
 8000cd6:	f000 810f 	beq.w	8000ef8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cda:	6863      	ldr	r3, [r4, #4]
 8000cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ce0:	f000 8152 	beq.w	8000f88 <HAL_RCC_OscConfig+0x2dc>
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	f000 80db 	beq.w	8000ea0 <HAL_RCC_OscConfig+0x1f4>
 8000cea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cee:	4b9f      	ldr	r3, [pc, #636]	; (8000f6c <HAL_RCC_OscConfig+0x2c0>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	f000 81a5 	beq.w	8001040 <HAL_RCC_OscConfig+0x394>
 8000cf6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d02:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d04:	f7ff fc44 	bl	8000590 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d08:	4d98      	ldr	r5, [pc, #608]	; (8000f6c <HAL_RCC_OscConfig+0x2c0>)
        tickstart = HAL_GetTick();
 8000d0a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d0c:	e005      	b.n	8000d1a <HAL_RCC_OscConfig+0x6e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d0e:	f7ff fc3f 	bl	8000590 <HAL_GetTick>
 8000d12:	1b80      	subs	r0, r0, r6
 8000d14:	2864      	cmp	r0, #100	; 0x64
 8000d16:	f200 80eb 	bhi.w	8000ef0 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d1a:	682b      	ldr	r3, [r5, #0]
 8000d1c:	039a      	lsls	r2, r3, #14
 8000d1e:	d5f6      	bpl.n	8000d0e <HAL_RCC_OscConfig+0x62>
 8000d20:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d22:	079f      	lsls	r7, r3, #30
 8000d24:	d529      	bpl.n	8000d7a <HAL_RCC_OscConfig+0xce>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d26:	4a91      	ldr	r2, [pc, #580]	; (8000f6c <HAL_RCC_OscConfig+0x2c0>)
 8000d28:	6891      	ldr	r1, [r2, #8]
 8000d2a:	f011 0f0c 	tst.w	r1, #12
 8000d2e:	f000 8082 	beq.w	8000e36 <HAL_RCC_OscConfig+0x18a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d32:	6891      	ldr	r1, [r2, #8]
 8000d34:	f001 010c 	and.w	r1, r1, #12
 8000d38:	2908      	cmp	r1, #8
 8000d3a:	d079      	beq.n	8000e30 <HAL_RCC_OscConfig+0x184>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d3c:	68e3      	ldr	r3, [r4, #12]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f000 8109 	beq.w	8000f56 <HAL_RCC_OscConfig+0x2aa>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d44:	4b89      	ldr	r3, [pc, #548]	; (8000f6c <HAL_RCC_OscConfig+0x2c0>)
 8000d46:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d48:	461d      	mov	r5, r3
        __HAL_RCC_HSI_ENABLE();
 8000d4a:	f042 0201 	orr.w	r2, r2, #1
 8000d4e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d50:	f7ff fc1e 	bl	8000590 <HAL_GetTick>
 8000d54:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d56:	e005      	b.n	8000d64 <HAL_RCC_OscConfig+0xb8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d58:	f7ff fc1a 	bl	8000590 <HAL_GetTick>
 8000d5c:	1b80      	subs	r0, r0, r6
 8000d5e:	2802      	cmp	r0, #2
 8000d60:	f200 80c6 	bhi.w	8000ef0 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d64:	682b      	ldr	r3, [r5, #0]
 8000d66:	0798      	lsls	r0, r3, #30
 8000d68:	d5f6      	bpl.n	8000d58 <HAL_RCC_OscConfig+0xac>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d6a:	682b      	ldr	r3, [r5, #0]
 8000d6c:	6922      	ldr	r2, [r4, #16]
 8000d6e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d72:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000d76:	602b      	str	r3, [r5, #0]
 8000d78:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d7a:	071a      	lsls	r2, r3, #28
 8000d7c:	d41f      	bmi.n	8000dbe <HAL_RCC_OscConfig+0x112>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d7e:	075d      	lsls	r5, r3, #29
 8000d80:	d536      	bpl.n	8000df0 <HAL_RCC_OscConfig+0x144>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d82:	4b7a      	ldr	r3, [pc, #488]	; (8000f6c <HAL_RCC_OscConfig+0x2c0>)
 8000d84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d86:	00d0      	lsls	r0, r2, #3
 8000d88:	d573      	bpl.n	8000e72 <HAL_RCC_OscConfig+0x1c6>
  FlagStatus pwrclkchanged = RESET;
 8000d8a:	2500      	movs	r5, #0
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d8c:	4b78      	ldr	r3, [pc, #480]	; (8000f70 <HAL_RCC_OscConfig+0x2c4>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	05d1      	lsls	r1, r2, #23
 8000d92:	f140 809c 	bpl.w	8000ece <HAL_RCC_OscConfig+0x222>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d96:	68a3      	ldr	r3, [r4, #8]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	f000 80fb 	beq.w	8000f94 <HAL_RCC_OscConfig+0x2e8>
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f000 80b8 	beq.w	8000f14 <HAL_RCC_OscConfig+0x268>
 8000da4:	2b05      	cmp	r3, #5
 8000da6:	4b71      	ldr	r3, [pc, #452]	; (8000f6c <HAL_RCC_OscConfig+0x2c0>)
 8000da8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000daa:	f000 810c 	beq.w	8000fc6 <HAL_RCC_OscConfig+0x31a>
 8000dae:	f022 0201 	bic.w	r2, r2, #1
 8000db2:	671a      	str	r2, [r3, #112]	; 0x70
 8000db4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000db6:	f022 0204 	bic.w	r2, r2, #4
 8000dba:	671a      	str	r2, [r3, #112]	; 0x70
 8000dbc:	e0ef      	b.n	8000f9e <HAL_RCC_OscConfig+0x2f2>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000dbe:	6963      	ldr	r3, [r4, #20]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d043      	beq.n	8000e4c <HAL_RCC_OscConfig+0x1a0>
      __HAL_RCC_LSI_ENABLE();
 8000dc4:	4b69      	ldr	r3, [pc, #420]	; (8000f6c <HAL_RCC_OscConfig+0x2c0>)
 8000dc6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dc8:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 8000dca:	f042 0201 	orr.w	r2, r2, #1
 8000dce:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000dd0:	f7ff fbde 	bl	8000590 <HAL_GetTick>
 8000dd4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dd6:	e005      	b.n	8000de4 <HAL_RCC_OscConfig+0x138>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dd8:	f7ff fbda 	bl	8000590 <HAL_GetTick>
 8000ddc:	1b80      	subs	r0, r0, r6
 8000dde:	2802      	cmp	r0, #2
 8000de0:	f200 8086 	bhi.w	8000ef0 <HAL_RCC_OscConfig+0x244>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000de4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000de6:	079b      	lsls	r3, r3, #30
 8000de8:	d5f6      	bpl.n	8000dd8 <HAL_RCC_OscConfig+0x12c>
 8000dea:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dec:	075d      	lsls	r5, r3, #29
 8000dee:	d4c8      	bmi.n	8000d82 <HAL_RCC_OscConfig+0xd6>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000df0:	69a2      	ldr	r2, [r4, #24]
 8000df2:	b1ca      	cbz	r2, 8000e28 <HAL_RCC_OscConfig+0x17c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000df4:	4b5d      	ldr	r3, [pc, #372]	; (8000f6c <HAL_RCC_OscConfig+0x2c0>)
 8000df6:	6899      	ldr	r1, [r3, #8]
 8000df8:	f001 010c 	and.w	r1, r1, #12
 8000dfc:	2908      	cmp	r1, #8
 8000dfe:	d021      	beq.n	8000e44 <HAL_RCC_OscConfig+0x198>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e00:	2a02      	cmp	r2, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e02:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e04:	f000 80e7 	beq.w	8000fd6 <HAL_RCC_OscConfig+0x32a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e08:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e0c:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 8000e0e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e10:	f7ff fbbe 	bl	8000590 <HAL_GetTick>
 8000e14:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e16:	e004      	b.n	8000e22 <HAL_RCC_OscConfig+0x176>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e18:	f7ff fbba 	bl	8000590 <HAL_GetTick>
 8000e1c:	1b40      	subs	r0, r0, r5
 8000e1e:	2802      	cmp	r0, #2
 8000e20:	d866      	bhi.n	8000ef0 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e22:	6823      	ldr	r3, [r4, #0]
 8000e24:	019b      	lsls	r3, r3, #6
 8000e26:	d4f7      	bmi.n	8000e18 <HAL_RCC_OscConfig+0x16c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000e28:	2000      	movs	r0, #0
}
 8000e2a:	b002      	add	sp, #8
 8000e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e30:	6852      	ldr	r2, [r2, #4]
 8000e32:	0256      	lsls	r6, r2, #9
 8000e34:	d482      	bmi.n	8000d3c <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e36:	4a4d      	ldr	r2, [pc, #308]	; (8000f6c <HAL_RCC_OscConfig+0x2c0>)
 8000e38:	6812      	ldr	r2, [r2, #0]
 8000e3a:	0795      	lsls	r5, r2, #30
 8000e3c:	d524      	bpl.n	8000e88 <HAL_RCC_OscConfig+0x1dc>
 8000e3e:	68e2      	ldr	r2, [r4, #12]
 8000e40:	2a01      	cmp	r2, #1
 8000e42:	d021      	beq.n	8000e88 <HAL_RCC_OscConfig+0x1dc>
    return HAL_ERROR;
 8000e44:	2001      	movs	r0, #1
}
 8000e46:	b002      	add	sp, #8
 8000e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8000e4c:	4b47      	ldr	r3, [pc, #284]	; (8000f6c <HAL_RCC_OscConfig+0x2c0>)
 8000e4e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e50:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 8000e52:	f022 0201 	bic.w	r2, r2, #1
 8000e56:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000e58:	f7ff fb9a 	bl	8000590 <HAL_GetTick>
 8000e5c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e5e:	e004      	b.n	8000e6a <HAL_RCC_OscConfig+0x1be>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e60:	f7ff fb96 	bl	8000590 <HAL_GetTick>
 8000e64:	1b80      	subs	r0, r0, r6
 8000e66:	2802      	cmp	r0, #2
 8000e68:	d842      	bhi.n	8000ef0 <HAL_RCC_OscConfig+0x244>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e6a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000e6c:	079f      	lsls	r7, r3, #30
 8000e6e:	d4f7      	bmi.n	8000e60 <HAL_RCC_OscConfig+0x1b4>
 8000e70:	e7bb      	b.n	8000dea <HAL_RCC_OscConfig+0x13e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8000e74:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e76:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e7a:	641a      	str	r2, [r3, #64]	; 0x40
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e82:	9301      	str	r3, [sp, #4]
 8000e84:	9b01      	ldr	r3, [sp, #4]
 8000e86:	e781      	b.n	8000d8c <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e88:	4938      	ldr	r1, [pc, #224]	; (8000f6c <HAL_RCC_OscConfig+0x2c0>)
 8000e8a:	6920      	ldr	r0, [r4, #16]
 8000e8c:	680a      	ldr	r2, [r1, #0]
 8000e8e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000e92:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8000e96:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e98:	071a      	lsls	r2, r3, #28
 8000e9a:	f57f af70 	bpl.w	8000d7e <HAL_RCC_OscConfig+0xd2>
 8000e9e:	e78e      	b.n	8000dbe <HAL_RCC_OscConfig+0x112>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ea0:	4b32      	ldr	r3, [pc, #200]	; (8000f6c <HAL_RCC_OscConfig+0x2c0>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ea4:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ea6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000eb2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000eb4:	f7ff fb6c 	bl	8000590 <HAL_GetTick>
 8000eb8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eba:	e004      	b.n	8000ec6 <HAL_RCC_OscConfig+0x21a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ebc:	f7ff fb68 	bl	8000590 <HAL_GetTick>
 8000ec0:	1b80      	subs	r0, r0, r6
 8000ec2:	2864      	cmp	r0, #100	; 0x64
 8000ec4:	d814      	bhi.n	8000ef0 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ec6:	682b      	ldr	r3, [r5, #0]
 8000ec8:	039b      	lsls	r3, r3, #14
 8000eca:	d4f7      	bmi.n	8000ebc <HAL_RCC_OscConfig+0x210>
 8000ecc:	e728      	b.n	8000d20 <HAL_RCC_OscConfig+0x74>
      PWR->CR1 |= PWR_CR1_DBP;
 8000ece:	681a      	ldr	r2, [r3, #0]
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ed0:	461e      	mov	r6, r3
      PWR->CR1 |= PWR_CR1_DBP;
 8000ed2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ed6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000ed8:	f7ff fb5a 	bl	8000590 <HAL_GetTick>
 8000edc:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ede:	6833      	ldr	r3, [r6, #0]
 8000ee0:	05da      	lsls	r2, r3, #23
 8000ee2:	f53f af58 	bmi.w	8000d96 <HAL_RCC_OscConfig+0xea>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000ee6:	f7ff fb53 	bl	8000590 <HAL_GetTick>
 8000eea:	1bc0      	subs	r0, r0, r7
 8000eec:	2864      	cmp	r0, #100	; 0x64
 8000eee:	d9f6      	bls.n	8000ede <HAL_RCC_OscConfig+0x232>
            return HAL_TIMEOUT;
 8000ef0:	2003      	movs	r0, #3
}
 8000ef2:	b002      	add	sp, #8
 8000ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ef8:	684a      	ldr	r2, [r1, #4]
 8000efa:	0250      	lsls	r0, r2, #9
 8000efc:	f57f aeed 	bpl.w	8000cda <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f00:	4a1a      	ldr	r2, [pc, #104]	; (8000f6c <HAL_RCC_OscConfig+0x2c0>)
 8000f02:	6812      	ldr	r2, [r2, #0]
 8000f04:	0391      	lsls	r1, r2, #14
 8000f06:	f57f af0c 	bpl.w	8000d22 <HAL_RCC_OscConfig+0x76>
 8000f0a:	6862      	ldr	r2, [r4, #4]
 8000f0c:	2a00      	cmp	r2, #0
 8000f0e:	f47f af08 	bne.w	8000d22 <HAL_RCC_OscConfig+0x76>
 8000f12:	e797      	b.n	8000e44 <HAL_RCC_OscConfig+0x198>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f14:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <HAL_RCC_OscConfig+0x2c0>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f16:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f1c:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f1e:	f022 0201 	bic.w	r2, r2, #1
 8000f22:	671a      	str	r2, [r3, #112]	; 0x70
 8000f24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000f26:	f022 0204 	bic.w	r2, r2, #4
 8000f2a:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000f2c:	f7ff fb30 	bl	8000590 <HAL_GetTick>
 8000f30:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f32:	e004      	b.n	8000f3e <HAL_RCC_OscConfig+0x292>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f34:	f7ff fb2c 	bl	8000590 <HAL_GetTick>
 8000f38:	1bc0      	subs	r0, r0, r7
 8000f3a:	4540      	cmp	r0, r8
 8000f3c:	d8d8      	bhi.n	8000ef0 <HAL_RCC_OscConfig+0x244>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f3e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000f40:	0798      	lsls	r0, r3, #30
 8000f42:	d4f7      	bmi.n	8000f34 <HAL_RCC_OscConfig+0x288>
    if(pwrclkchanged == SET)
 8000f44:	2d00      	cmp	r5, #0
 8000f46:	f43f af53 	beq.w	8000df0 <HAL_RCC_OscConfig+0x144>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f4a:	4a08      	ldr	r2, [pc, #32]	; (8000f6c <HAL_RCC_OscConfig+0x2c0>)
 8000f4c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000f4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f52:	6413      	str	r3, [r2, #64]	; 0x40
 8000f54:	e74c      	b.n	8000df0 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_HSI_DISABLE();
 8000f56:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <HAL_RCC_OscConfig+0x2c0>)
 8000f58:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f5a:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 8000f5c:	f022 0201 	bic.w	r2, r2, #1
 8000f60:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f62:	f7ff fb15 	bl	8000590 <HAL_GetTick>
 8000f66:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f68:	e009      	b.n	8000f7e <HAL_RCC_OscConfig+0x2d2>
 8000f6a:	bf00      	nop
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40007000 	.word	0x40007000
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f74:	f7ff fb0c 	bl	8000590 <HAL_GetTick>
 8000f78:	1b80      	subs	r0, r0, r6
 8000f7a:	2802      	cmp	r0, #2
 8000f7c:	d8b8      	bhi.n	8000ef0 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f7e:	682b      	ldr	r3, [r5, #0]
 8000f80:	0799      	lsls	r1, r3, #30
 8000f82:	d4f7      	bmi.n	8000f74 <HAL_RCC_OscConfig+0x2c8>
 8000f84:	6823      	ldr	r3, [r4, #0]
 8000f86:	e6f8      	b.n	8000d7a <HAL_RCC_OscConfig+0xce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f88:	4a32      	ldr	r2, [pc, #200]	; (8001054 <HAL_RCC_OscConfig+0x3a8>)
 8000f8a:	6813      	ldr	r3, [r2, #0]
 8000f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	e6b7      	b.n	8000d04 <HAL_RCC_OscConfig+0x58>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f94:	4a2f      	ldr	r2, [pc, #188]	; (8001054 <HAL_RCC_OscConfig+0x3a8>)
 8000f96:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000f9e:	f7ff faf7 	bl	8000590 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fa2:	4e2c      	ldr	r6, [pc, #176]	; (8001054 <HAL_RCC_OscConfig+0x3a8>)
      tickstart = HAL_GetTick();
 8000fa4:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fa6:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000faa:	e005      	b.n	8000fb8 <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fac:	f7ff faf0 	bl	8000590 <HAL_GetTick>
 8000fb0:	eba0 0008 	sub.w	r0, r0, r8
 8000fb4:	42b8      	cmp	r0, r7
 8000fb6:	d89b      	bhi.n	8000ef0 <HAL_RCC_OscConfig+0x244>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fb8:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000fba:	079b      	lsls	r3, r3, #30
 8000fbc:	d5f6      	bpl.n	8000fac <HAL_RCC_OscConfig+0x300>
    if(pwrclkchanged == SET)
 8000fbe:	2d00      	cmp	r5, #0
 8000fc0:	f43f af16 	beq.w	8000df0 <HAL_RCC_OscConfig+0x144>
 8000fc4:	e7c1      	b.n	8000f4a <HAL_RCC_OscConfig+0x29e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fc6:	f042 0204 	orr.w	r2, r2, #4
 8000fca:	671a      	str	r2, [r3, #112]	; 0x70
 8000fcc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000fce:	f042 0201 	orr.w	r2, r2, #1
 8000fd2:	671a      	str	r2, [r3, #112]	; 0x70
 8000fd4:	e7e3      	b.n	8000f9e <HAL_RCC_OscConfig+0x2f2>
        __HAL_RCC_PLL_DISABLE();
 8000fd6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fda:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8000fdc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fde:	f7ff fad7 	bl	8000590 <HAL_GetTick>
 8000fe2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fe4:	e005      	b.n	8000ff2 <HAL_RCC_OscConfig+0x346>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fe6:	f7ff fad3 	bl	8000590 <HAL_GetTick>
 8000fea:	1b80      	subs	r0, r0, r6
 8000fec:	2802      	cmp	r0, #2
 8000fee:	f63f af7f 	bhi.w	8000ef0 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ff2:	682b      	ldr	r3, [r5, #0]
 8000ff4:	0199      	lsls	r1, r3, #6
 8000ff6:	d4f6      	bmi.n	8000fe6 <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ff8:	6a22      	ldr	r2, [r4, #32]
 8000ffa:	69e3      	ldr	r3, [r4, #28]
 8000ffc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000ffe:	4313      	orrs	r3, r2
 8001000:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001002:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001004:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001008:	0852      	lsrs	r2, r2, #1
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800100a:	4c12      	ldr	r4, [pc, #72]	; (8001054 <HAL_RCC_OscConfig+0x3a8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800100c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001010:	3a01      	subs	r2, #1
 8001012:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001016:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800101a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800101c:	682b      	ldr	r3, [r5, #0]
 800101e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001022:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001024:	f7ff fab4 	bl	8000590 <HAL_GetTick>
 8001028:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800102a:	e005      	b.n	8001038 <HAL_RCC_OscConfig+0x38c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800102c:	f7ff fab0 	bl	8000590 <HAL_GetTick>
 8001030:	1b40      	subs	r0, r0, r5
 8001032:	2802      	cmp	r0, #2
 8001034:	f63f af5c 	bhi.w	8000ef0 <HAL_RCC_OscConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001038:	6823      	ldr	r3, [r4, #0]
 800103a:	019a      	lsls	r2, r3, #6
 800103c:	d5f6      	bpl.n	800102c <HAL_RCC_OscConfig+0x380>
 800103e:	e6f3      	b.n	8000e28 <HAL_RCC_OscConfig+0x17c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001040:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	e659      	b.n	8000d04 <HAL_RCC_OscConfig+0x58>
    return HAL_ERROR;
 8001050:	2001      	movs	r0, #1
}
 8001052:	4770      	bx	lr
 8001054:	40023800 	.word	0x40023800

08001058 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001058:	4916      	ldr	r1, [pc, #88]	; (80010b4 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 800105a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800105c:	688b      	ldr	r3, [r1, #8]
 800105e:	f003 030c 	and.w	r3, r3, #12
 8001062:	2b04      	cmp	r3, #4
 8001064:	d01b      	beq.n	800109e <HAL_RCC_GetSysClockFreq+0x46>
 8001066:	2b08      	cmp	r3, #8
 8001068:	d117      	bne.n	800109a <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800106a:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800106c:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800106e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001072:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001074:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8001078:	d113      	bne.n	80010a2 <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800107a:	480f      	ldr	r0, [pc, #60]	; (80010b8 <HAL_RCC_GetSysClockFreq+0x60>)
 800107c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001080:	fba1 0100 	umull	r0, r1, r1, r0
 8001084:	f7ff f8c0 	bl	8000208 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001088:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <HAL_RCC_GetSysClockFreq+0x5c>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001090:	3301      	adds	r3, #1
 8001092:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001094:	fbb0 f0f3 	udiv	r0, r0, r3
 8001098:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800109a:	4807      	ldr	r0, [pc, #28]	; (80010b8 <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800109c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800109e:	4807      	ldr	r0, [pc, #28]	; (80010bc <HAL_RCC_GetSysClockFreq+0x64>)
 80010a0:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010a2:	4806      	ldr	r0, [pc, #24]	; (80010bc <HAL_RCC_GetSysClockFreq+0x64>)
 80010a4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80010a8:	2300      	movs	r3, #0
 80010aa:	fba1 0100 	umull	r0, r1, r1, r0
 80010ae:	f7ff f8ab 	bl	8000208 <__aeabi_uldivmod>
 80010b2:	e7e9      	b.n	8001088 <HAL_RCC_GetSysClockFreq+0x30>
 80010b4:	40023800 	.word	0x40023800
 80010b8:	00f42400 	.word	0x00f42400
 80010bc:	017d7840 	.word	0x017d7840

080010c0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80010c0:	b178      	cbz	r0, 80010e2 <HAL_RCC_ClockConfig+0x22>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010c2:	4a4a      	ldr	r2, [pc, #296]	; (80011ec <HAL_RCC_ClockConfig+0x12c>)
 80010c4:	6813      	ldr	r3, [r2, #0]
 80010c6:	f003 030f 	and.w	r3, r3, #15
 80010ca:	428b      	cmp	r3, r1
 80010cc:	d20b      	bcs.n	80010e6 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ce:	6813      	ldr	r3, [r2, #0]
 80010d0:	f023 030f 	bic.w	r3, r3, #15
 80010d4:	430b      	orrs	r3, r1
 80010d6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010d8:	6813      	ldr	r3, [r2, #0]
 80010da:	f003 030f 	and.w	r3, r3, #15
 80010de:	4299      	cmp	r1, r3
 80010e0:	d001      	beq.n	80010e6 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 80010e2:	2001      	movs	r0, #1
}
 80010e4:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010e6:	6803      	ldr	r3, [r0, #0]
{
 80010e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010ec:	079d      	lsls	r5, r3, #30
 80010ee:	d514      	bpl.n	800111a <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010f0:	075c      	lsls	r4, r3, #29
 80010f2:	d504      	bpl.n	80010fe <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010f4:	4c3e      	ldr	r4, [pc, #248]	; (80011f0 <HAL_RCC_ClockConfig+0x130>)
 80010f6:	68a2      	ldr	r2, [r4, #8]
 80010f8:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80010fc:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010fe:	071a      	lsls	r2, r3, #28
 8001100:	d504      	bpl.n	800110c <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001102:	4c3b      	ldr	r4, [pc, #236]	; (80011f0 <HAL_RCC_ClockConfig+0x130>)
 8001104:	68a2      	ldr	r2, [r4, #8]
 8001106:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800110a:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800110c:	4c38      	ldr	r4, [pc, #224]	; (80011f0 <HAL_RCC_ClockConfig+0x130>)
 800110e:	6885      	ldr	r5, [r0, #8]
 8001110:	68a2      	ldr	r2, [r4, #8]
 8001112:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001116:	432a      	orrs	r2, r5
 8001118:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800111a:	07df      	lsls	r7, r3, #31
 800111c:	4604      	mov	r4, r0
 800111e:	460d      	mov	r5, r1
 8001120:	d521      	bpl.n	8001166 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001122:	6842      	ldr	r2, [r0, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001124:	4b32      	ldr	r3, [pc, #200]	; (80011f0 <HAL_RCC_ClockConfig+0x130>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001126:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001128:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800112a:	d05b      	beq.n	80011e4 <HAL_RCC_ClockConfig+0x124>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800112c:	2a02      	cmp	r2, #2
 800112e:	d053      	beq.n	80011d8 <HAL_RCC_ClockConfig+0x118>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001130:	0799      	lsls	r1, r3, #30
 8001132:	d528      	bpl.n	8001186 <HAL_RCC_ClockConfig+0xc6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001134:	492e      	ldr	r1, [pc, #184]	; (80011f0 <HAL_RCC_ClockConfig+0x130>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001136:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800113a:	688b      	ldr	r3, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800113c:	460e      	mov	r6, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800113e:	f023 0303 	bic.w	r3, r3, #3
 8001142:	4313      	orrs	r3, r2
 8001144:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001146:	f7ff fa23 	bl	8000590 <HAL_GetTick>
 800114a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800114c:	e004      	b.n	8001158 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800114e:	f7ff fa1f 	bl	8000590 <HAL_GetTick>
 8001152:	1bc0      	subs	r0, r0, r7
 8001154:	4540      	cmp	r0, r8
 8001156:	d842      	bhi.n	80011de <HAL_RCC_ClockConfig+0x11e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001158:	68b3      	ldr	r3, [r6, #8]
 800115a:	6862      	ldr	r2, [r4, #4]
 800115c:	f003 030c 	and.w	r3, r3, #12
 8001160:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001164:	d1f3      	bne.n	800114e <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001166:	4a21      	ldr	r2, [pc, #132]	; (80011ec <HAL_RCC_ClockConfig+0x12c>)
 8001168:	6813      	ldr	r3, [r2, #0]
 800116a:	f003 030f 	and.w	r3, r3, #15
 800116e:	429d      	cmp	r5, r3
 8001170:	d20c      	bcs.n	800118c <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001172:	6813      	ldr	r3, [r2, #0]
 8001174:	f023 030f 	bic.w	r3, r3, #15
 8001178:	432b      	orrs	r3, r5
 800117a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800117c:	6813      	ldr	r3, [r2, #0]
 800117e:	f003 030f 	and.w	r3, r3, #15
 8001182:	429d      	cmp	r5, r3
 8001184:	d002      	beq.n	800118c <HAL_RCC_ClockConfig+0xcc>
    return HAL_ERROR;
 8001186:	2001      	movs	r0, #1
 8001188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800118c:	6823      	ldr	r3, [r4, #0]
 800118e:	075a      	lsls	r2, r3, #29
 8001190:	d506      	bpl.n	80011a0 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001192:	4917      	ldr	r1, [pc, #92]	; (80011f0 <HAL_RCC_ClockConfig+0x130>)
 8001194:	68e0      	ldr	r0, [r4, #12]
 8001196:	688a      	ldr	r2, [r1, #8]
 8001198:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800119c:	4302      	orrs	r2, r0
 800119e:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011a0:	071b      	lsls	r3, r3, #28
 80011a2:	d507      	bpl.n	80011b4 <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011a4:	4a12      	ldr	r2, [pc, #72]	; (80011f0 <HAL_RCC_ClockConfig+0x130>)
 80011a6:	6921      	ldr	r1, [r4, #16]
 80011a8:	6893      	ldr	r3, [r2, #8]
 80011aa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80011ae:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80011b2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011b4:	f7ff ff50 	bl	8001058 <HAL_RCC_GetSysClockFreq>
 80011b8:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <HAL_RCC_ClockConfig+0x130>)
 80011ba:	490e      	ldr	r1, [pc, #56]	; (80011f4 <HAL_RCC_ClockConfig+0x134>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	4a0e      	ldr	r2, [pc, #56]	; (80011f8 <HAL_RCC_ClockConfig+0x138>)
 80011c0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80011c4:	5ccb      	ldrb	r3, [r1, r3]
 80011c6:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (TICK_INT_PRIORITY);
 80011ca:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011cc:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80011ce:	f7ff f9a3 	bl	8000518 <HAL_InitTick>
  return HAL_OK;
 80011d2:	2000      	movs	r0, #0
 80011d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011d8:	0198      	lsls	r0, r3, #6
 80011da:	d4ab      	bmi.n	8001134 <HAL_RCC_ClockConfig+0x74>
 80011dc:	e7d3      	b.n	8001186 <HAL_RCC_ClockConfig+0xc6>
        return HAL_TIMEOUT;
 80011de:	2003      	movs	r0, #3
}
 80011e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e4:	039e      	lsls	r6, r3, #14
 80011e6:	d4a5      	bmi.n	8001134 <HAL_RCC_ClockConfig+0x74>
 80011e8:	e7cd      	b.n	8001186 <HAL_RCC_ClockConfig+0xc6>
 80011ea:	bf00      	nop
 80011ec:	40023c00 	.word	0x40023c00
 80011f0:	40023800 	.word	0x40023800
 80011f4:	08002140 	.word	0x08002140
 80011f8:	20000008 	.word	0x20000008

080011fc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80011fc:	6803      	ldr	r3, [r0, #0]
{
 80011fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001202:	f013 0601 	ands.w	r6, r3, #1
{
 8001206:	b083      	sub	sp, #12
 8001208:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800120a:	d00b      	beq.n	8001224 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800120c:	4ab8      	ldr	r2, [pc, #736]	; (80014f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800120e:	6891      	ldr	r1, [r2, #8]
 8001210:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8001214:	6091      	str	r1, [r2, #8]
 8001216:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001218:	6891      	ldr	r1, [r2, #8]
 800121a:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800121c:	fab6 f686 	clz	r6, r6
 8001220:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001222:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001224:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8001228:	d010      	beq.n	800124c <HAL_RCCEx_PeriphCLKConfig+0x50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800122a:	49b1      	ldr	r1, [pc, #708]	; (80014f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800122c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800122e:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001232:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001236:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800123a:	ea42 0205 	orr.w	r2, r2, r5
 800123e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001242:	f000 81a1 	beq.w	8001588 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001246:	fab5 f585 	clz	r5, r5
 800124a:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800124c:	02d9      	lsls	r1, r3, #11
 800124e:	d510      	bpl.n	8001272 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001250:	48a7      	ldr	r0, [pc, #668]	; (80014f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001252:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001254:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001258:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800125c:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001260:	ea42 0201 	orr.w	r2, r2, r1
 8001264:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001268:	f000 818c 	beq.w	8001584 <HAL_RCCEx_PeriphCLKConfig+0x388>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800126c:	2900      	cmp	r1, #0
 800126e:	bf08      	it	eq
 8001270:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8001272:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001276:	bf18      	it	ne
 8001278:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800127a:	069a      	lsls	r2, r3, #26
 800127c:	f100 813a 	bmi.w	80014f4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001280:	06d9      	lsls	r1, r3, #27
 8001282:	d50c      	bpl.n	800129e <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001284:	4a9a      	ldr	r2, [pc, #616]	; (80014f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001286:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800128a:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800128e:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001292:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001296:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001298:	4301      	orrs	r1, r0
 800129a:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800129e:	045a      	lsls	r2, r3, #17
 80012a0:	d508      	bpl.n	80012b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80012a2:	4993      	ldr	r1, [pc, #588]	; (80014f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80012a4:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80012a6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80012aa:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80012ae:	4302      	orrs	r2, r0
 80012b0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80012b4:	041f      	lsls	r7, r3, #16
 80012b6:	d508      	bpl.n	80012ca <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80012b8:	498d      	ldr	r1, [pc, #564]	; (80014f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80012ba:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80012bc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80012c0:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80012c4:	4302      	orrs	r2, r0
 80012c6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80012ca:	03d8      	lsls	r0, r3, #15
 80012cc:	d508      	bpl.n	80012e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80012ce:	4988      	ldr	r1, [pc, #544]	; (80014f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80012d0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80012d2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80012d6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80012da:	4302      	orrs	r2, r0
 80012dc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80012e0:	0399      	lsls	r1, r3, #14
 80012e2:	d508      	bpl.n	80012f6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80012e4:	4982      	ldr	r1, [pc, #520]	; (80014f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80012e6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80012e8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80012ec:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80012f0:	4302      	orrs	r2, r0
 80012f2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80012f6:	065a      	lsls	r2, r3, #25
 80012f8:	d508      	bpl.n	800130c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80012fa:	497d      	ldr	r1, [pc, #500]	; (80014f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80012fc:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80012fe:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001302:	f022 0203 	bic.w	r2, r2, #3
 8001306:	4302      	orrs	r2, r0
 8001308:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800130c:	061f      	lsls	r7, r3, #24
 800130e:	d508      	bpl.n	8001322 <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001310:	4977      	ldr	r1, [pc, #476]	; (80014f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001312:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001314:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001318:	f022 020c 	bic.w	r2, r2, #12
 800131c:	4302      	orrs	r2, r0
 800131e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001322:	05d8      	lsls	r0, r3, #23
 8001324:	d508      	bpl.n	8001338 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001326:	4972      	ldr	r1, [pc, #456]	; (80014f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001328:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800132a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800132e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001332:	4302      	orrs	r2, r0
 8001334:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001338:	0599      	lsls	r1, r3, #22
 800133a:	d508      	bpl.n	800134e <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800133c:	496c      	ldr	r1, [pc, #432]	; (80014f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800133e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001340:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001344:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001348:	4302      	orrs	r2, r0
 800134a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800134e:	055a      	lsls	r2, r3, #21
 8001350:	d508      	bpl.n	8001364 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001352:	4967      	ldr	r1, [pc, #412]	; (80014f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001354:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001356:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800135a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800135e:	4302      	orrs	r2, r0
 8001360:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001364:	051f      	lsls	r7, r3, #20
 8001366:	d508      	bpl.n	800137a <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001368:	4961      	ldr	r1, [pc, #388]	; (80014f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800136a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800136c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001370:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001374:	4302      	orrs	r2, r0
 8001376:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800137a:	04d8      	lsls	r0, r3, #19
 800137c:	d508      	bpl.n	8001390 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800137e:	495c      	ldr	r1, [pc, #368]	; (80014f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001380:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001382:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001386:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800138a:	4302      	orrs	r2, r0
 800138c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001390:	0499      	lsls	r1, r3, #18
 8001392:	d508      	bpl.n	80013a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001394:	4956      	ldr	r1, [pc, #344]	; (80014f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001396:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001398:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800139c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80013a0:	4302      	orrs	r2, r0
 80013a2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80013a6:	025a      	lsls	r2, r3, #9
 80013a8:	d508      	bpl.n	80013bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80013aa:	4951      	ldr	r1, [pc, #324]	; (80014f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80013ac:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80013ae:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80013b2:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80013b6:	4302      	orrs	r2, r0
 80013b8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80013bc:	029f      	lsls	r7, r3, #10
 80013be:	d50c      	bpl.n	80013da <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80013c0:	494b      	ldr	r1, [pc, #300]	; (80014f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80013c2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80013c4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 80013c8:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80013cc:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 80013d0:	bf08      	it	eq
 80013d2:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80013d4:	4302      	orrs	r2, r0
 80013d6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 80013da:	f013 0f08 	tst.w	r3, #8
 80013de:	bf18      	it	ne
 80013e0:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80013e2:	0358      	lsls	r0, r3, #13
 80013e4:	d508      	bpl.n	80013f8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80013e6:	4942      	ldr	r1, [pc, #264]	; (80014f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80013e8:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80013ea:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80013ee:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80013f2:	4302      	orrs	r2, r0
 80013f4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80013f8:	0219      	lsls	r1, r3, #8
 80013fa:	d40b      	bmi.n	8001414 <HAL_RCCEx_PeriphCLKConfig+0x218>
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80013fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001400:	d016      	beq.n	8001430 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8001402:	07f2      	lsls	r2, r6, #31
 8001404:	d414      	bmi.n	8001430 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001406:	2d01      	cmp	r5, #1
 8001408:	f000 80c1 	beq.w	800158e <HAL_RCCEx_PeriphCLKConfig+0x392>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800140c:	2000      	movs	r0, #0
}
 800140e:	b003      	add	sp, #12
 8001410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001414:	4936      	ldr	r1, [pc, #216]	; (80014f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001416:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800141a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800141e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001422:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001426:	ea42 0200 	orr.w	r2, r2, r0
 800142a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800142e:	d1e8      	bne.n	8001402 <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_PLLI2S_DISABLE();
 8001430:	4b2f      	ldr	r3, [pc, #188]	; (80014f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001432:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001434:	461e      	mov	r6, r3
    __HAL_RCC_PLLI2S_DISABLE();
 8001436:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800143a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800143c:	f7ff f8a8 	bl	8000590 <HAL_GetTick>
 8001440:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001442:	e004      	b.n	800144e <HAL_RCCEx_PeriphCLKConfig+0x252>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001444:	f7ff f8a4 	bl	8000590 <HAL_GetTick>
 8001448:	1bc0      	subs	r0, r0, r7
 800144a:	2864      	cmp	r0, #100	; 0x64
 800144c:	d84c      	bhi.n	80014e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800144e:	6833      	ldr	r3, [r6, #0]
 8001450:	011b      	lsls	r3, r3, #4
 8001452:	d4f7      	bmi.n	8001444 <HAL_RCCEx_PeriphCLKConfig+0x248>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001454:	6823      	ldr	r3, [r4, #0]
 8001456:	07df      	lsls	r7, r3, #31
 8001458:	d503      	bpl.n	8001462 <HAL_RCCEx_PeriphCLKConfig+0x266>
 800145a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800145c:	2a00      	cmp	r2, #0
 800145e:	f000 8100 	beq.w	8001662 <HAL_RCCEx_PeriphCLKConfig+0x466>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001462:	031e      	lsls	r6, r3, #12
 8001464:	d504      	bpl.n	8001470 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8001466:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001468:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800146c:	f000 8124 	beq.w	80016b8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8001470:	02d8      	lsls	r0, r3, #11
 8001472:	d504      	bpl.n	800147e <HAL_RCCEx_PeriphCLKConfig+0x282>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001474:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001476:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800147a:	f000 811d 	beq.w	80016b8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800147e:	01d9      	lsls	r1, r3, #7
 8001480:	d511      	bpl.n	80014a6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001482:	4e1b      	ldr	r6, [pc, #108]	; (80014f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001484:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001486:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800148a:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800148e:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001492:	6921      	ldr	r1, [r4, #16]
 8001494:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 8001498:	433a      	orrs	r2, r7
 800149a:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800149e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80014a2:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80014a6:	019a      	lsls	r2, r3, #6
 80014a8:	d50d      	bpl.n	80014c6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80014aa:	6923      	ldr	r3, [r4, #16]
 80014ac:	6862      	ldr	r2, [r4, #4]
 80014ae:	041b      	lsls	r3, r3, #16
 80014b0:	68e0      	ldr	r0, [r4, #12]
 80014b2:	68a1      	ldr	r1, [r4, #8]
 80014b4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80014b8:	4a0d      	ldr	r2, [pc, #52]	; (80014f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80014ba:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80014be:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80014c2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80014c6:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80014c8:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80014ca:	461e      	mov	r6, r3
    __HAL_RCC_PLLI2S_ENABLE();
 80014cc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80014d0:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80014d2:	f7ff f85d 	bl	8000590 <HAL_GetTick>
 80014d6:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80014d8:	6833      	ldr	r3, [r6, #0]
 80014da:	011b      	lsls	r3, r3, #4
 80014dc:	d493      	bmi.n	8001406 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80014de:	f7ff f857 	bl	8000590 <HAL_GetTick>
 80014e2:	1bc0      	subs	r0, r0, r7
 80014e4:	2864      	cmp	r0, #100	; 0x64
 80014e6:	d9f7      	bls.n	80014d8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
        return HAL_TIMEOUT;
 80014e8:	2003      	movs	r0, #3
}
 80014ea:	b003      	add	sp, #12
 80014ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80014f0:	40023800 	.word	0x40023800
    __HAL_RCC_PWR_CLK_ENABLE();
 80014f4:	4a8c      	ldr	r2, [pc, #560]	; (8001728 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
    PWR->CR1 |= PWR_CR1_DBP;
 80014f6:	4b8d      	ldr	r3, [pc, #564]	; (800172c <HAL_RCCEx_PeriphCLKConfig+0x530>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80014f8:	6c11      	ldr	r1, [r2, #64]	; 0x40
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80014fa:	461f      	mov	r7, r3
    __HAL_RCC_PWR_CLK_ENABLE();
 80014fc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001500:	6411      	str	r1, [r2, #64]	; 0x40
 8001502:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001504:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001508:	9201      	str	r2, [sp, #4]
 800150a:	9a01      	ldr	r2, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001512:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001514:	f7ff f83c 	bl	8000590 <HAL_GetTick>
 8001518:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800151a:	e005      	b.n	8001528 <HAL_RCCEx_PeriphCLKConfig+0x32c>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800151c:	f7ff f838 	bl	8000590 <HAL_GetTick>
 8001520:	eba0 0008 	sub.w	r0, r0, r8
 8001524:	2864      	cmp	r0, #100	; 0x64
 8001526:	d8df      	bhi.n	80014e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	05db      	lsls	r3, r3, #23
 800152c:	d5f6      	bpl.n	800151c <HAL_RCCEx_PeriphCLKConfig+0x320>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800152e:	4a7e      	ldr	r2, [pc, #504]	; (8001728 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001530:	6b23      	ldr	r3, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001532:	6f11      	ldr	r1, [r2, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001534:	f403 7040 	and.w	r0, r3, #768	; 0x300
 8001538:	f411 7140 	ands.w	r1, r1, #768	; 0x300
 800153c:	d011      	beq.n	8001562 <HAL_RCCEx_PeriphCLKConfig+0x366>
 800153e:	4281      	cmp	r1, r0
 8001540:	d00f      	beq.n	8001562 <HAL_RCCEx_PeriphCLKConfig+0x366>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001542:	6f11      	ldr	r1, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001544:	6f17      	ldr	r7, [r2, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001546:	f421 7140 	bic.w	r1, r1, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800154a:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000
 800154e:	6717      	str	r7, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001550:	6f17      	ldr	r7, [r2, #112]	; 0x70
 8001552:	f427 3780 	bic.w	r7, r7, #65536	; 0x10000
 8001556:	6717      	str	r7, [r2, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001558:	6711      	str	r1, [r2, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800155a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800155c:	07cf      	lsls	r7, r1, #31
 800155e:	f100 8096 	bmi.w	800168e <HAL_RCCEx_PeriphCLKConfig+0x492>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001562:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 8001566:	f000 80c3 	beq.w	80016f0 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800156a:	496f      	ldr	r1, [pc, #444]	; (8001728 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800156c:	688a      	ldr	r2, [r1, #8]
 800156e:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8001572:	608a      	str	r2, [r1, #8]
 8001574:	4a6c      	ldr	r2, [pc, #432]	; (8001728 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8001576:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800157a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800157c:	430b      	orrs	r3, r1
 800157e:	6713      	str	r3, [r2, #112]	; 0x70
 8001580:	6823      	ldr	r3, [r4, #0]
 8001582:	e67d      	b.n	8001280 <HAL_RCCEx_PeriphCLKConfig+0x84>
      plli2sused = 1;
 8001584:	2601      	movs	r6, #1
 8001586:	e674      	b.n	8001272 <HAL_RCCEx_PeriphCLKConfig+0x76>
  uint32_t pllsaiused = 0;
 8001588:	2500      	movs	r5, #0
      plli2sused = 1;
 800158a:	2601      	movs	r6, #1
 800158c:	e65e      	b.n	800124c <HAL_RCCEx_PeriphCLKConfig+0x50>
    __HAL_RCC_PLLSAI_DISABLE();
 800158e:	4b66      	ldr	r3, [pc, #408]	; (8001728 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8001590:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001592:	461d      	mov	r5, r3
    __HAL_RCC_PLLSAI_DISABLE();
 8001594:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001598:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800159a:	f7fe fff9 	bl	8000590 <HAL_GetTick>
 800159e:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80015a0:	e004      	b.n	80015ac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80015a2:	f7fe fff5 	bl	8000590 <HAL_GetTick>
 80015a6:	1b80      	subs	r0, r0, r6
 80015a8:	2864      	cmp	r0, #100	; 0x64
 80015aa:	d89d      	bhi.n	80014e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80015ac:	682b      	ldr	r3, [r5, #0]
 80015ae:	009f      	lsls	r7, r3, #2
 80015b0:	d4f7      	bmi.n	80015a2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80015b2:	6823      	ldr	r3, [r4, #0]
 80015b4:	031d      	lsls	r5, r3, #12
 80015b6:	d466      	bmi.n	8001686 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80015b8:	02d8      	lsls	r0, r3, #11
 80015ba:	d51d      	bpl.n	80015f8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80015bc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80015be:	b9da      	cbnz	r2, 80015f8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80015c0:	4959      	ldr	r1, [pc, #356]	; (8001728 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80015c2:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80015c4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80015c8:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80015cc:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80015d0:	69a0      	ldr	r0, [r4, #24]
 80015d2:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 80015d6:	4332      	orrs	r2, r6
 80015d8:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 80015dc:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80015e0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80015e4:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80015e8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80015ea:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 80015ee:	3801      	subs	r0, #1
 80015f0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80015f4:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80015f8:	0299      	lsls	r1, r3, #10
 80015fa:	d503      	bpl.n	8001604 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80015fc:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80015fe:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 8001602:	d07e      	beq.n	8001702 <HAL_RCCEx_PeriphCLKConfig+0x506>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001604:	071a      	lsls	r2, r3, #28
 8001606:	d519      	bpl.n	800163c <HAL_RCCEx_PeriphCLKConfig+0x440>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001608:	4a47      	ldr	r2, [pc, #284]	; (8001728 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800160a:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800160c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001610:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001614:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001618:	69e0      	ldr	r0, [r4, #28]
 800161a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800161e:	430b      	orrs	r3, r1
 8001620:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8001624:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 8001628:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800162c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001630:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001632:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001636:	430b      	orrs	r3, r1
 8001638:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 800163c:	4b3a      	ldr	r3, [pc, #232]	; (8001728 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800163e:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001640:	461c      	mov	r4, r3
    __HAL_RCC_PLLSAI_ENABLE();
 8001642:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001646:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001648:	f7fe ffa2 	bl	8000590 <HAL_GetTick>
 800164c:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800164e:	6823      	ldr	r3, [r4, #0]
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	f53f aedb 	bmi.w	800140c <HAL_RCCEx_PeriphCLKConfig+0x210>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001656:	f7fe ff9b 	bl	8000590 <HAL_GetTick>
 800165a:	1b40      	subs	r0, r0, r5
 800165c:	2864      	cmp	r0, #100	; 0x64
 800165e:	d9f6      	bls.n	800164e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8001660:	e742      	b.n	80014e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001662:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001666:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800166a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800166e:	6860      	ldr	r0, [r4, #4]
 8001670:	f007 6770 	and.w	r7, r7, #251658240	; 0xf000000
 8001674:	68a1      	ldr	r1, [r4, #8]
 8001676:	433a      	orrs	r2, r7
 8001678:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800167c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8001680:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
 8001684:	e6ed      	b.n	8001462 <HAL_RCCEx_PeriphCLKConfig+0x266>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001686:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001688:	2a00      	cmp	r2, #0
 800168a:	d099      	beq.n	80015c0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 800168c:	e794      	b.n	80015b8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800168e:	4617      	mov	r7, r2
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001690:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001694:	f7fe ff7c 	bl	8000590 <HAL_GetTick>
 8001698:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800169a:	e006      	b.n	80016aa <HAL_RCCEx_PeriphCLKConfig+0x4ae>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800169c:	f7fe ff78 	bl	8000590 <HAL_GetTick>
 80016a0:	eba0 0009 	sub.w	r0, r0, r9
 80016a4:	4540      	cmp	r0, r8
 80016a6:	f63f af1f 	bhi.w	80014e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016ac:	0798      	lsls	r0, r3, #30
 80016ae:	d5f5      	bpl.n	800169c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80016b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80016b2:	f403 7040 	and.w	r0, r3, #768	; 0x300
 80016b6:	e754      	b.n	8001562 <HAL_RCCEx_PeriphCLKConfig+0x366>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80016b8:	4e1b      	ldr	r6, [pc, #108]	; (8001728 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80016ba:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80016bc:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80016c0:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80016c4:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80016c8:	68e1      	ldr	r1, [r4, #12]
 80016ca:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 80016ce:	433a      	orrs	r2, r7
 80016d0:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 80016d4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80016d8:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80016dc:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 80016e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80016e2:	f021 011f 	bic.w	r1, r1, #31
 80016e6:	3a01      	subs	r2, #1
 80016e8:	430a      	orrs	r2, r1
 80016ea:	f8c6 208c 	str.w	r2, [r6, #140]	; 0x8c
 80016ee:	e6c6      	b.n	800147e <HAL_RCCEx_PeriphCLKConfig+0x282>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80016f0:	480d      	ldr	r0, [pc, #52]	; (8001728 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 80016f2:	490f      	ldr	r1, [pc, #60]	; (8001730 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 80016f4:	6882      	ldr	r2, [r0, #8]
 80016f6:	4019      	ands	r1, r3
 80016f8:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80016fc:	430a      	orrs	r2, r1
 80016fe:	6082      	str	r2, [r0, #8]
 8001700:	e738      	b.n	8001574 <HAL_RCCEx_PeriphCLKConfig+0x378>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001702:	4909      	ldr	r1, [pc, #36]	; (8001728 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001704:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001706:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800170a:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800170e:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001712:	6a20      	ldr	r0, [r4, #32]
 8001714:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 8001718:	4332      	orrs	r2, r6
 800171a:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 800171e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001722:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
 8001726:	e76d      	b.n	8001604 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8001728:	40023800 	.word	0x40023800
 800172c:	40007000 	.word	0x40007000
 8001730:	0ffffcff 	.word	0x0ffffcff

08001734 <HAL_RNG_GenerateRandomNumber.part.0>:
  *                the configuration information for RNG.
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
 8001734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001736:	4604      	mov	r4, r0
{
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 8001738:	2001      	movs	r0, #1

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800173a:	7963      	ldrb	r3, [r4, #5]
  __HAL_LOCK(hrng);
 800173c:	7120      	strb	r0, [r4, #4]
  if (hrng->State == HAL_RNG_STATE_READY)
 800173e:	4283      	cmp	r3, r0
 8001740:	d004      	beq.n	800174c <HAL_RNG_GenerateRandomNumber.part.0+0x18>

    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8001742:	2304      	movs	r3, #4
 8001744:	60a3      	str	r3, [r4, #8]
    status = HAL_ERROR;
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8001746:	2300      	movs	r3, #0
 8001748:	7123      	strb	r3, [r4, #4]

  return status;
}
 800174a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 800174c:	2302      	movs	r3, #2
 800174e:	460e      	mov	r6, r1
 8001750:	7163      	strb	r3, [r4, #5]
    tickstart = HAL_GetTick();
 8001752:	f7fe ff1d 	bl	8000590 <HAL_GetTick>
 8001756:	4607      	mov	r7, r0
 8001758:	e004      	b.n	8001764 <HAL_RNG_GenerateRandomNumber.part.0+0x30>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800175a:	f7fe ff19 	bl	8000590 <HAL_GetTick>
 800175e:	1bc0      	subs	r0, r0, r7
 8001760:	2802      	cmp	r0, #2
 8001762:	d80b      	bhi.n	800177c <HAL_RNG_GenerateRandomNumber.part.0+0x48>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8001764:	6822      	ldr	r2, [r4, #0]
 8001766:	6855      	ldr	r5, [r2, #4]
 8001768:	f015 0501 	ands.w	r5, r5, #1
 800176c:	d0f5      	beq.n	800175a <HAL_RNG_GenerateRandomNumber.part.0+0x26>
    hrng->RandomNumber = hrng->Instance->DR;
 800176e:	6893      	ldr	r3, [r2, #8]
    hrng->State = HAL_RNG_STATE_READY;
 8001770:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 8001772:	2000      	movs	r0, #0
    hrng->RandomNumber = hrng->Instance->DR;
 8001774:	60e3      	str	r3, [r4, #12]
    *random32bit = hrng->RandomNumber;
 8001776:	6033      	str	r3, [r6, #0]
    hrng->State = HAL_RNG_STATE_READY;
 8001778:	7162      	strb	r2, [r4, #5]
 800177a:	e7e4      	b.n	8001746 <HAL_RNG_GenerateRandomNumber.part.0+0x12>
        hrng->State = HAL_RNG_STATE_READY;
 800177c:	2001      	movs	r0, #1
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800177e:	2302      	movs	r3, #2
        __HAL_UNLOCK(hrng);
 8001780:	7125      	strb	r5, [r4, #4]
        hrng->State = HAL_RNG_STATE_READY;
 8001782:	7160      	strb	r0, [r4, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8001784:	60a3      	str	r3, [r4, #8]
 8001786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001788 <HAL_RNG_Init>:
  if (hrng == NULL)
 8001788:	b1b0      	cbz	r0, 80017b8 <HAL_RNG_Init+0x30>
{
 800178a:	b538      	push	{r3, r4, r5, lr}
  if (hrng->State == HAL_RNG_STATE_RESET)
 800178c:	7943      	ldrb	r3, [r0, #5]
 800178e:	4604      	mov	r4, r0
 8001790:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001794:	b163      	cbz	r3, 80017b0 <HAL_RNG_Init+0x28>
  __HAL_RNG_ENABLE(hrng);
 8001796:	6821      	ldr	r1, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 8001798:	2302      	movs	r3, #2
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800179a:	2200      	movs	r2, #0
  hrng->State = HAL_RNG_STATE_READY;
 800179c:	2501      	movs	r5, #1
  hrng->State = HAL_RNG_STATE_BUSY;
 800179e:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 80017a0:	680b      	ldr	r3, [r1, #0]
  return HAL_OK;
 80017a2:	4610      	mov	r0, r2
  __HAL_RNG_ENABLE(hrng);
 80017a4:	f043 0304 	orr.w	r3, r3, #4
 80017a8:	600b      	str	r3, [r1, #0]
  hrng->State = HAL_RNG_STATE_READY;
 80017aa:	7165      	strb	r5, [r4, #5]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80017ac:	60a2      	str	r2, [r4, #8]
  return HAL_OK;
 80017ae:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 80017b0:	7102      	strb	r2, [r0, #4]
    HAL_RNG_MspInit(hrng);
 80017b2:	f000 fc13 	bl	8001fdc <HAL_RNG_MspInit>
 80017b6:	e7ee      	b.n	8001796 <HAL_RNG_Init+0xe>
    return HAL_ERROR;
 80017b8:	2001      	movs	r0, #1
 80017ba:	4770      	bx	lr

080017bc <HAL_RNG_GetRandomNumber>:
  __HAL_LOCK(hrng);
 80017bc:	7902      	ldrb	r2, [r0, #4]
 80017be:	2a01      	cmp	r2, #1
 80017c0:	d00a      	beq.n	80017d8 <HAL_RNG_GetRandomNumber+0x1c>
 80017c2:	f100 010c 	add.w	r1, r0, #12
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 80017c6:	b510      	push	{r4, lr}
 80017c8:	4604      	mov	r4, r0
 80017ca:	f7ff ffb3 	bl	8001734 <HAL_RNG_GenerateRandomNumber.part.0>
  if(HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 80017ce:	b908      	cbnz	r0, 80017d4 <HAL_RNG_GetRandomNumber+0x18>
  {
    return hrng->RandomNumber;
 80017d0:	68e0      	ldr	r0, [r4, #12]
  }
  else
  {
    return 0U;
  }
}
 80017d2:	bd10      	pop	{r4, pc}
    return 0U;
 80017d4:	2000      	movs	r0, #0
 80017d6:	bd10      	pop	{r4, pc}
 80017d8:	2000      	movs	r0, #0
}
 80017da:	4770      	bx	lr

080017dc <TFT_FillScreen>:
extern LTDC_HandleTypeDef hltdc;
//----------------------------------------
void TFT_FillScreen(uint32_t color)
{
	uint32_t i;
	uint32_t n = hltdc.LayerCfg[0].ImageHeight*hltdc.LayerCfg[0].ImageWidth;
 80017dc:	4b07      	ldr	r3, [pc, #28]	; (80017fc <TFT_FillScreen+0x20>)
 80017de:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80017e0:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80017e2:	fb01 f102 	mul.w	r1, r1, r2
	for(i=0;i<n;i++)
 80017e6:	b139      	cbz	r1, 80017f8 <TFT_FillScreen+0x1c>
 80017e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017ea:	b280      	uxth	r0, r0
 80017ec:	2300      	movs	r3, #0
 80017ee:	3301      	adds	r3, #1
	{
		*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(i*2))=(uint16_t) color;
 80017f0:	f822 0b02 	strh.w	r0, [r2], #2
	for(i=0;i<n;i++)
 80017f4:	4299      	cmp	r1, r3
 80017f6:	d1fa      	bne.n	80017ee <TFT_FillScreen+0x12>
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	2003fc2c 	.word	0x2003fc2c

08001800 <TFT_FillRectangle>:
//----------------------------------------
void TFT_FillRectangle(uint16_t x1, uint16_t y1,
											uint16_t x2, uint16_t y2, uint16_t color)
{
	uint32_t xpos,ypos;
	if(x1>x2) swap(x1,x2);
 8001800:	4290      	cmp	r0, r2
{
 8001802:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001804:	f8bd 6014 	ldrh.w	r6, [sp, #20]
	if(x1>x2) swap(x1,x2);
 8001808:	d802      	bhi.n	8001810 <TFT_FillRectangle+0x10>
 800180a:	4614      	mov	r4, r2
 800180c:	4602      	mov	r2, r0
 800180e:	4620      	mov	r0, r4
	if(y1>y2) swap(y1,y2);
 8001810:	4299      	cmp	r1, r3
 8001812:	d802      	bhi.n	800181a <TFT_FillRectangle+0x1a>
 8001814:	461c      	mov	r4, r3
 8001816:	460b      	mov	r3, r1
 8001818:	4621      	mov	r1, r4
	for(ypos=y1;ypos<=y2;ypos++)
 800181a:	428b      	cmp	r3, r1
 800181c:	d816      	bhi.n	800184c <TFT_FillRectangle+0x4c>
 800181e:	4d0c      	ldr	r5, [pc, #48]	; (8001850 <TFT_FillRectangle+0x50>)
 8001820:	6e2c      	ldr	r4, [r5, #96]	; 0x60
 8001822:	6def      	ldr	r7, [r5, #92]	; 0x5c
 8001824:	fb04 2503 	mla	r5, r4, r3, r2
 8001828:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 800182c:	eb07 0745 	add.w	r7, r7, r5, lsl #1
	{
		for(xpos=x1;xpos<=x2;xpos++)
 8001830:	4290      	cmp	r0, r2
 8001832:	d306      	bcc.n	8001842 <TFT_FillRectangle+0x42>
 8001834:	463d      	mov	r5, r7
 8001836:	4614      	mov	r4, r2
 8001838:	3401      	adds	r4, #1
		{
			*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(ypos*hltdc.LayerCfg[0].ImageWidth+xpos)))=(uint16_t) color;
 800183a:	f825 6b02 	strh.w	r6, [r5], #2
		for(xpos=x1;xpos<=x2;xpos++)
 800183e:	4284      	cmp	r4, r0
 8001840:	d9fa      	bls.n	8001838 <TFT_FillRectangle+0x38>
	for(ypos=y1;ypos<=y2;ypos++)
 8001842:	3301      	adds	r3, #1
 8001844:	4477      	add	r7, lr
 8001846:	428b      	cmp	r3, r1
 8001848:	d9f2      	bls.n	8001830 <TFT_FillRectangle+0x30>
 800184a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800184c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800184e:	bf00      	nop
 8001850:	2003fc2c 	.word	0x2003fc2c

08001854 <TFT_DrawPixel>:
		}
	}
}
//----------------------------------------
void TFT_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t color)
{
 8001854:	b410      	push	{r4}
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Ypos*hltdc.LayerCfg[0].ImageWidth+Xpos)))=(uint16_t) color;
 8001856:	4c05      	ldr	r4, [pc, #20]	; (800186c <TFT_DrawPixel+0x18>)
 8001858:	b292      	uxth	r2, r2
 800185a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800185c:	6de4      	ldr	r4, [r4, #92]	; 0x5c
 800185e:	fb03 0101 	mla	r1, r3, r1, r0
 8001862:	f824 2011 	strh.w	r2, [r4, r1, lsl #1]
}
 8001866:	f85d 4b04 	ldr.w	r4, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	2003fc2c 	.word	0x2003fc2c

08001870 <TFT_DrawLine>:
//----------------------------------------
void TFT_DrawLine(uint16_t x1, uint16_t y1,
											uint16_t x2, uint16_t y2, uint16_t color)
{
 8001870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int steep = abs(y2-y1)>abs(x2-x1);
 8001874:	1a5d      	subs	r5, r3, r1
 8001876:	1a16      	subs	r6, r2, r0
{
 8001878:	b083      	sub	sp, #12
	int steep = abs(y2-y1)>abs(x2-x1);
 800187a:	2d00      	cmp	r5, #0
{
 800187c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
	int steep = abs(y2-y1)>abs(x2-x1);
 8001880:	bfb8      	it	lt
 8001882:	426d      	neglt	r5, r5
 8001884:	2e00      	cmp	r6, #0
 8001886:	bfb8      	it	lt
 8001888:	4276      	neglt	r6, r6
	if(steep)
 800188a:	42b5      	cmp	r5, r6
 800188c:	dc50      	bgt.n	8001930 <TFT_DrawLine+0xc0>
 800188e:	460c      	mov	r4, r1
 8001890:	469c      	mov	ip, r3
 8001892:	4696      	mov	lr, r2
 8001894:	4613      	mov	r3, r2
 8001896:	4680      	mov	r8, r0
 8001898:	4601      	mov	r1, r0
 800189a:	4662      	mov	r2, ip
 800189c:	4620      	mov	r0, r4
	{
		swap(x1,y1);
		swap(x2,y2);
	}
	if(x1>x2)
 800189e:	4299      	cmp	r1, r3
 80018a0:	d80b      	bhi.n	80018ba <TFT_DrawLine+0x4a>
 80018a2:	46a3      	mov	fp, r4
 80018a4:	46c2      	mov	sl, r8
 80018a6:	4691      	mov	r9, r2
 80018a8:	9301      	str	r3, [sp, #4]
 80018aa:	4664      	mov	r4, ip
 80018ac:	46f0      	mov	r8, lr
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	46dc      	mov	ip, fp
 80018b4:	46d6      	mov	lr, sl
 80018b6:	4648      	mov	r0, r9
 80018b8:	9901      	ldr	r1, [sp, #4]
		swap(x1,x2);
		swap(y1,y2);
	}
	int dx,dy;
	dx=x2-x1;
	dy=abs(y2-y1);
 80018ba:	eba4 040c 	sub.w	r4, r4, ip
	dx=x2-x1;
 80018be:	eba8 0e0e 	sub.w	lr, r8, lr
	dy=abs(y2-y1);
 80018c2:	2c00      	cmp	r4, #0
	int err=dx/2;
 80018c4:	46f1      	mov	r9, lr
	dy=abs(y2-y1);
 80018c6:	bfb8      	it	lt
 80018c8:	4264      	neglt	r4, r4
	int err=dx/2;
 80018ca:	f1be 0f00 	cmp.w	lr, #0
 80018ce:	bfb8      	it	lt
 80018d0:	f10e 0901 	addlt.w	r9, lr, #1
	int ystep;
	if(y1<y2) ystep=1;
 80018d4:	4290      	cmp	r0, r2
	int err=dx/2;
 80018d6:	ea4f 0969 	mov.w	r9, r9, asr #1
	if(y1<y2) ystep=1;
 80018da:	d924      	bls.n	8001926 <TFT_DrawLine+0xb6>
 80018dc:	f04f 0a01 	mov.w	sl, #1
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Ypos*hltdc.LayerCfg[0].ImageWidth+Xpos)))=(uint16_t) color;
 80018e0:	4816      	ldr	r0, [pc, #88]	; (800193c <TFT_DrawLine+0xcc>)
 80018e2:	f8d0 805c 	ldr.w	r8, [r0, #92]	; 0x5c
 80018e6:	6e00      	ldr	r0, [r0, #96]	; 0x60
 80018e8:	e008      	b.n	80018fc <TFT_DrawLine+0x8c>
	else ystep=-1;
	for(;x1<=x2;x1++)
 80018ea:	3301      	adds	r3, #1
	{
		if(steep) TFT_DrawPixel(y1,x1,color);
		else TFT_DrawPixel(x1,y1,color);
		err-=dy;
		if(err<0)
 80018ec:	ebb9 0904 	subs.w	r9, r9, r4
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Ypos*hltdc.LayerCfg[0].ImageWidth+Xpos)))=(uint16_t) color;
 80018f0:	f828 701b 	strh.w	r7, [r8, fp, lsl #1]
	for(;x1<=x2;x1++)
 80018f4:	b29b      	uxth	r3, r3
		if(err<0)
 80018f6:	d40e      	bmi.n	8001916 <TFT_DrawLine+0xa6>
	for(;x1<=x2;x1++)
 80018f8:	428b      	cmp	r3, r1
 80018fa:	d811      	bhi.n	8001920 <TFT_DrawLine+0xb0>
		if(steep) TFT_DrawPixel(y1,x1,color);
 80018fc:	42b5      	cmp	r5, r6
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Ypos*hltdc.LayerCfg[0].ImageWidth+Xpos)))=(uint16_t) color;
 80018fe:	fb00 3c02 	mla	ip, r0, r2, r3
 8001902:	fb00 2b03 	mla	fp, r0, r3, r2
		if(steep) TFT_DrawPixel(y1,x1,color);
 8001906:	dcf0      	bgt.n	80018ea <TFT_DrawLine+0x7a>
	for(;x1<=x2;x1++)
 8001908:	3301      	adds	r3, #1
		if(err<0)
 800190a:	ebb9 0904 	subs.w	r9, r9, r4
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Ypos*hltdc.LayerCfg[0].ImageWidth+Xpos)))=(uint16_t) color;
 800190e:	f828 701c 	strh.w	r7, [r8, ip, lsl #1]
	for(;x1<=x2;x1++)
 8001912:	b29b      	uxth	r3, r3
		if(err<0)
 8001914:	d5f0      	bpl.n	80018f8 <TFT_DrawLine+0x88>
		{
			y1 += ystep;
 8001916:	4452      	add	r2, sl
	for(;x1<=x2;x1++)
 8001918:	428b      	cmp	r3, r1
	dx=x2-x1;
 800191a:	46f1      	mov	r9, lr
			y1 += ystep;
 800191c:	b292      	uxth	r2, r2
	for(;x1<=x2;x1++)
 800191e:	d9ed      	bls.n	80018fc <TFT_DrawLine+0x8c>
			err=dx;
		}
	}
}
 8001920:	b003      	add	sp, #12
 8001922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for(;x1<=x2;x1++)
 8001926:	428b      	cmp	r3, r1
 8001928:	d8fa      	bhi.n	8001920 <TFT_DrawLine+0xb0>
	else ystep=-1;
 800192a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800192e:	e7d7      	b.n	80018e0 <TFT_DrawLine+0x70>
 8001930:	4688      	mov	r8, r1
 8001932:	4604      	mov	r4, r0
 8001934:	469e      	mov	lr, r3
 8001936:	4694      	mov	ip, r2
 8001938:	e7b1      	b.n	800189e <TFT_DrawLine+0x2e>
 800193a:	bf00      	nop
 800193c:	2003fc2c 	.word	0x2003fc2c

08001940 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001940:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001942:	2400      	movs	r4, #0
{
 8001944:	b0b5      	sub	sp, #212	; 0xd4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001946:	2230      	movs	r2, #48	; 0x30
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001948:	2502      	movs	r5, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800194a:	4621      	mov	r1, r4
 800194c:	a807      	add	r0, sp, #28
 800194e:	f000 fbe3 	bl	8002118 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001952:	4621      	mov	r1, r4
 8001954:	a813      	add	r0, sp, #76	; 0x4c
 8001956:	2284      	movs	r2, #132	; 0x84
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001958:	9402      	str	r4, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800195a:	2601      	movs	r6, #1
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800195c:	9403      	str	r4, [sp, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800195e:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001962:	9404      	str	r4, [sp, #16]
 8001964:	9405      	str	r4, [sp, #20]
 8001966:	9406      	str	r4, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001968:	f000 fbd6 	bl	8002118 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 800196c:	4a23      	ldr	r2, [pc, #140]	; (80019fc <SystemClock_Config+0xbc>)
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800196e:	f44f 0e80 	mov.w	lr, #4194304	; 0x400000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001972:	4b23      	ldr	r3, [pc, #140]	; (8001a00 <SystemClock_Config+0xc0>)
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 400;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 8;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001974:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8001976:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001978:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800197c:	6411      	str	r1, [r2, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 25;
 800197e:	2119      	movs	r1, #25
  __HAL_RCC_PWR_CLK_ENABLE();
 8001980:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001982:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001986:	9200      	str	r2, [sp, #0]
 8001988:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001990:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001992:	f44f 72c8 	mov.w	r2, #400	; 0x190
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001996:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001998:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800199c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLM = 25;
 80019a0:	910f      	str	r1, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 400;
 80019a2:	9210      	str	r2, [sp, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019a4:	9301      	str	r3, [sp, #4]
 80019a6:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80019a8:	2308      	movs	r3, #8
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019aa:	9708      	str	r7, [sp, #32]
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ac:	270f      	movs	r7, #15
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80019ae:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019b0:	9607      	str	r6, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019b2:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019b4:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019b6:	f7ff f979 	bl	8000cac <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80019ba:	f7ff f93b 	bl	8000c34 <HAL_PWREx_EnableOverDrive>
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019be:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80019c6:	a802      	add	r0, sp, #8
 80019c8:	2106      	movs	r1, #6
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019ca:	9205      	str	r2, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019cc:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019ce:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019d0:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019d2:	9702      	str	r7, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80019d4:	f7ff fb74 	bl	80010c0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_CLK48;
 80019d8:	490a      	ldr	r1, [pc, #40]	; (8001a04 <SystemClock_Config+0xc4>)
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80019da:	22c0      	movs	r2, #192	; 0xc0
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
  PeriphClkInitStruct.PLLSAIDivQ = 1;
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80019dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019e0:	a813      	add	r0, sp, #76	; 0x4c
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80019e2:	951a      	str	r5, [sp, #104]	; 0x68
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80019e4:	9519      	str	r5, [sp, #100]	; 0x64
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 80019e6:	961b      	str	r6, [sp, #108]	; 0x6c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80019e8:	961d      	str	r6, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80019ea:	941e      	str	r4, [sp, #120]	; 0x78
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_CLK48;
 80019ec:	9113      	str	r1, [sp, #76]	; 0x4c
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80019ee:	9218      	str	r2, [sp, #96]	; 0x60
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80019f0:	9332      	str	r3, [sp, #200]	; 0xc8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019f2:	f7ff fc03 	bl	80011fc <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80019f6:	b035      	add	sp, #212	; 0xd4
 80019f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40007000 	.word	0x40007000
 8001a04:	00200008 	.word	0x00200008

08001a08 <main>:
{
 8001a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001a0c:	2400      	movs	r4, #0
{
 8001a0e:	b097      	sub	sp, #92	; 0x5c
  HAL_MPU_Disable();
  /** Initializes and configures the Region and the memory to be protected 
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x20010000;
 8001a10:	4da4      	ldr	r5, [pc, #656]	; (8001ca4 <main+0x29c>)
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001a12:	940a      	str	r4, [sp, #40]	; 0x28
 8001a14:	9409      	str	r4, [sp, #36]	; 0x24
 8001a16:	940b      	str	r4, [sp, #44]	; 0x2c
 8001a18:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_MPU_Disable();
 8001a1a:	f7fe fe37 	bl	800068c <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001a1e:	2301      	movs	r3, #1
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8001a20:	2111      	movs	r1, #17
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001a22:	2203      	movs	r2, #3
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001a24:	a809      	add	r0, sp, #36	; 0x24
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001a26:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001a2a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8001a2e:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001a32:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001a36:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001a3a:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001a3e:	f88d 402e 	strb.w	r4, [sp, #46]	; 0x2e
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001a42:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001a46:	f88d 4031 	strb.w	r4, [sp, #49]	; 0x31
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001a4a:	f88d 4033 	strb.w	r4, [sp, #51]	; 0x33
  MPU_InitStruct.BaseAddress = 0x20010000;
 8001a4e:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001a50:	f7fe fe3e 	bl	80006d0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001a54:	2004      	movs	r0, #4
 8001a56:	f7fe fe29 	bl	80006ac <HAL_MPU_Enable>
  __ASM volatile ("dsb 0xF":::"memory");
 8001a5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001a5e:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001a62:	4b91      	ldr	r3, [pc, #580]	; (8001ca8 <main+0x2a0>)
 8001a64:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001a68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001a6c:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001a70:	695a      	ldr	r2, [r3, #20]
 8001a72:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001a76:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a78:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001a7c:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001a80:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001a84:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001a88:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001a8c:	f643 77e0 	movw	r7, #16352	; 0x3fe0
 8001a90:	f3c2 05c9 	ubfx	r5, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001a94:	f3c2 324e 	ubfx	r2, r2, #13, #15
 8001a98:	07ae      	lsls	r6, r5, #30
 8001a9a:	0152      	lsls	r2, r2, #5
 8001a9c:	ea02 0e07 	and.w	lr, r2, r7
{
 8001aa0:	4630      	mov	r0, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001aa2:	4629      	mov	r1, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001aa4:	ea40 040e 	orr.w	r4, r0, lr
      } while (ways-- != 0U);
 8001aa8:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001aaa:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
 8001aae:	f8c3 4260 	str.w	r4, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 8001ab2:	1c4c      	adds	r4, r1, #1
 8001ab4:	d1f6      	bne.n	8001aa4 <main+0x9c>
 8001ab6:	3a20      	subs	r2, #32
    } while(sets-- != 0U);
 8001ab8:	f112 0f20 	cmn.w	r2, #32
 8001abc:	d1ee      	bne.n	8001a9c <main+0x94>
 8001abe:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001ac2:	695a      	ldr	r2, [r3, #20]
 8001ac4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ac8:	615a      	str	r2, [r3, #20]
 8001aca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ace:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8001ad2:	f7fe fd45 	bl	8000560 <HAL_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad6:	2700      	movs	r7, #0
  SystemClock_Config();
 8001ad8:	f7ff ff32 	bl	8001940 <SystemClock_Config>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001adc:	4b73      	ldr	r3, [pc, #460]	; (8001cac <main+0x2a4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ade:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 8001ae0:	2201      	movs	r2, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae2:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ae4:	2602      	movs	r6, #2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae6:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae8:	4614      	mov	r4, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aea:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 8001aec:	2108      	movs	r1, #8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aee:	970d      	str	r7, [sp, #52]	; 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001af0:	6b1d      	ldr	r5, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 8001af2:	486f      	ldr	r0, [pc, #444]	; (8001cb0 <main+0x2a8>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001af4:	f045 0510 	orr.w	r5, r5, #16
  hrng.Instance = RNG;
 8001af8:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 8001cd0 <main+0x2c8>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001afc:	631d      	str	r5, [r3, #48]	; 0x30
 8001afe:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8001b00:	f005 0510 	and.w	r5, r5, #16
 8001b04:	9502      	str	r5, [sp, #8]
 8001b06:	9d02      	ldr	r5, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b08:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8001b0a:	4315      	orrs	r5, r2
 8001b0c:	631d      	str	r5, [r3, #48]	; 0x30
 8001b0e:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8001b10:	4015      	ands	r5, r2
 8001b12:	9503      	str	r5, [sp, #12]
 8001b14:	9d03      	ldr	r5, [sp, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001b16:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8001b18:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 8001b1c:	631d      	str	r5, [r3, #48]	; 0x30
 8001b1e:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8001b20:	f405 7500 	and.w	r5, r5, #512	; 0x200
 8001b24:	9504      	str	r5, [sp, #16]
 8001b26:	9d04      	ldr	r5, [sp, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001b28:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8001b2a:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
 8001b2e:	631d      	str	r5, [r3, #48]	; 0x30
 8001b30:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8001b32:	f405 6580 	and.w	r5, r5, #1024	; 0x400
 8001b36:	9505      	str	r5, [sp, #20]
 8001b38:	9d05      	ldr	r5, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b3a:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8001b3c:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8001b40:	631d      	str	r5, [r3, #48]	; 0x30
 8001b42:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8001b44:	f005 0540 	and.w	r5, r5, #64	; 0x40
 8001b48:	9506      	str	r5, [sp, #24]
 8001b4a:	9d06      	ldr	r5, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001b4c:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8001b4e:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 8001b52:	631d      	str	r5, [r3, #48]	; 0x30
 8001b54:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8001b56:	f405 7580 	and.w	r5, r5, #256	; 0x100
 8001b5a:	9507      	str	r5, [sp, #28]
 8001b5c:	9d07      	ldr	r5, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b5e:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8001b60:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8001b64:	631d      	str	r5, [r3, #48]	; 0x30
 8001b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  hltdc.Instance = LTDC;
 8001b68:	4d52      	ldr	r5, [pc, #328]	; (8001cb4 <main+0x2ac>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b6e:	9308      	str	r3, [sp, #32]
 8001b70:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 8001b72:	f7fe ff01 	bl	8000978 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 8001b76:	4631      	mov	r1, r6
 8001b78:	463a      	mov	r2, r7
 8001b7a:	484f      	ldr	r0, [pc, #316]	; (8001cb8 <main+0x2b0>)
 8001b7c:	f7fe fefc 	bl	8000978 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET);
 8001b80:	4622      	mov	r2, r4
 8001b82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b86:	484c      	ldr	r0, [pc, #304]	; (8001cb8 <main+0x2b0>)
 8001b88:	f7fe fef6 	bl	8000978 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b8c:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001b8e:	a909      	add	r1, sp, #36	; 0x24
 8001b90:	4847      	ldr	r0, [pc, #284]	; (8001cb0 <main+0x2a8>)
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b92:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b94:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b96:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001b9a:	f7fe fdc3 	bl	8000724 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001b9e:	a909      	add	r1, sp, #36	; 0x24
 8001ba0:	4845      	ldr	r0, [pc, #276]	; (8001cb8 <main+0x2b0>)
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ba2:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba4:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba8:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001baa:	f7fe fdbb 	bl	8000724 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001bae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001bb2:	a909      	add	r1, sp, #36	; 0x24
 8001bb4:	4840      	ldr	r0, [pc, #256]	; (8001cb8 <main+0x2b0>)
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001bb6:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb8:	940a      	str	r4, [sp, #40]	; 0x28
  hltdc.Init.AccumulatedVBP = 11;
 8001bba:	240b      	movs	r4, #11
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bbc:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001bc0:	f7fe fdb0 	bl	8000724 <HAL_GPIO_Init>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001bc4:	4639      	mov	r1, r7
 8001bc6:	2234      	movs	r2, #52	; 0x34
 8001bc8:	a809      	add	r0, sp, #36	; 0x24
 8001bca:	f000 faa5 	bl	8002118 <memset>
  hltdc.Instance = LTDC;
 8001bce:	483b      	ldr	r0, [pc, #236]	; (8001cbc <main+0x2b4>)
  hltdc.Init.HorizontalSync = 40;
 8001bd0:	2128      	movs	r1, #40	; 0x28
  hltdc.Init.VerticalSync = 9;
 8001bd2:	2209      	movs	r2, #9
  hltdc.Init.AccumulatedHBP = 53;
 8001bd4:	2335      	movs	r3, #53	; 0x35
  hltdc.Instance = LTDC;
 8001bd6:	6028      	str	r0, [r5, #0]
  hltdc.Init.AccumulatedActiveW = 533;
 8001bd8:	f240 2015 	movw	r0, #533	; 0x215
  hltdc.Init.HorizontalSync = 40;
 8001bdc:	6169      	str	r1, [r5, #20]
  hltdc.Init.VerticalSync = 9;
 8001bde:	61aa      	str	r2, [r5, #24]
  hltdc.Init.AccumulatedActiveH = 283;
 8001be0:	f240 111b 	movw	r1, #283	; 0x11b
  hltdc.Init.TotalWidth = 565;
 8001be4:	f240 2235 	movw	r2, #565	; 0x235
  hltdc.Init.AccumulatedHBP = 53;
 8001be8:	61eb      	str	r3, [r5, #28]
  hltdc.Init.TotalHeigh = 285;
 8001bea:	f240 131d 	movw	r3, #285	; 0x11d
  hltdc.Init.AccumulatedActiveW = 533;
 8001bee:	6268      	str	r0, [r5, #36]	; 0x24
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001bf0:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedVBP = 11;
 8001bf2:	622c      	str	r4, [r5, #32]
  hltdc.Init.AccumulatedActiveH = 283;
 8001bf4:	62a9      	str	r1, [r5, #40]	; 0x28
			TFT_FillScreen((uint16_t)HAL_RNG_GetRandomNumber(&hrng));
 8001bf6:	4644      	mov	r4, r8
  hltdc.Init.TotalWidth = 565;
 8001bf8:	62ea      	str	r2, [r5, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001bfa:	632b      	str	r3, [r5, #48]	; 0x30
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001bfc:	606f      	str	r7, [r5, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001bfe:	60af      	str	r7, [r5, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001c00:	60ef      	str	r7, [r5, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001c02:	612f      	str	r7, [r5, #16]
  hltdc.Init.Backcolor.Blue = 0;
 8001c04:	f885 7034 	strb.w	r7, [r5, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001c08:	f885 7035 	strb.w	r7, [r5, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001c0c:	f885 7036 	strb.w	r7, [r5, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001c10:	f7fe ff46 	bl	8000aa0 <HAL_LTDC_Init>
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001c14:	f44f 6280 	mov.w	r2, #1024	; 0x400
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001c18:	2005      	movs	r0, #5
  pLayerCfg.Alpha = 255;
 8001c1a:	f04f 0eff 	mov.w	lr, #255	; 0xff
  pLayerCfg.WindowY1 = 272;
 8001c1e:	f44f 7388 	mov.w	r3, #272	; 0x110
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001c22:	960d      	str	r6, [sp, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 8001c24:	f44f 76f0 	mov.w	r6, #480	; 0x1e0
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001c28:	a909      	add	r1, sp, #36	; 0x24
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001c2a:	9210      	str	r2, [sp, #64]	; 0x40
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001c2c:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001c2e:	463a      	mov	r2, r7
 8001c30:	4628      	mov	r0, r5
  pLayerCfg.Alpha = 255;
 8001c32:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  pLayerCfg.WindowX1 = 480;
 8001c36:	960a      	str	r6, [sp, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001c38:	9613      	str	r6, [sp, #76]	; 0x4c
  pLayerCfg.WindowY1 = 272;
 8001c3a:	930c      	str	r3, [sp, #48]	; 0x30
  pLayerCfg.ImageHeight = 272;
 8001c3c:	9314      	str	r3, [sp, #80]	; 0x50
  pLayerCfg.WindowX0 = 0;
 8001c3e:	9709      	str	r7, [sp, #36]	; 0x24
  pLayerCfg.WindowY0 = 0;
 8001c40:	970b      	str	r7, [sp, #44]	; 0x2c
  pLayerCfg.Alpha0 = 0;
 8001c42:	970f      	str	r7, [sp, #60]	; 0x3c
  pLayerCfg.FBStartAdress = 0;
 8001c44:	9712      	str	r7, [sp, #72]	; 0x48
  pLayerCfg.Backcolor.Blue = 0;
 8001c46:	f88d 7054 	strb.w	r7, [sp, #84]	; 0x54
  pLayerCfg.Backcolor.Green = 0;
 8001c4a:	f88d 7055 	strb.w	r7, [sp, #85]	; 0x55
  pLayerCfg.Backcolor.Red = 0;
 8001c4e:	f88d 7056 	strb.w	r7, [sp, #86]	; 0x56
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001c52:	f7fe ff9d 	bl	8000b90 <HAL_LTDC_ConfigLayer>
  hrng.Instance = RNG;
 8001c56:	4b1a      	ldr	r3, [pc, #104]	; (8001cc0 <main+0x2b8>)
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001c58:	4640      	mov	r0, r8
												HAL_RNG_GetRandomNumber(&hrng)%272,
 8001c5a:	4e1a      	ldr	r6, [pc, #104]	; (8001cc4 <main+0x2bc>)
  hrng.Instance = RNG;
 8001c5c:	f8c8 3000 	str.w	r3, [r8]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001c60:	f7ff fd92 	bl	8001788 <HAL_RNG_Init>
	HAL_LTDC_SetAddress(&hltdc,(uint32_t)&RGB565_480x272,0);
 8001c64:	4628      	mov	r0, r5
 8001c66:	463a      	mov	r2, r7
 8001c68:	4917      	ldr	r1, [pc, #92]	; (8001cc8 <main+0x2c0>)
 8001c6a:	f7fe ffc1 	bl	8000bf0 <HAL_LTDC_SetAddress>
	TFT_FillScreen((uint32_t)0x0000);
 8001c6e:	4638      	mov	r0, r7
												HAL_RNG_GetRandomNumber(&hrng)%480,
 8001c70:	4d16      	ldr	r5, [pc, #88]	; (8001ccc <main+0x2c4>)
	TFT_FillScreen((uint32_t)0x0000);
 8001c72:	f7ff fdb3 	bl	80017dc <TFT_FillScreen>
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001c76:	2764      	movs	r7, #100	; 0x64
 8001c78:	3f01      	subs	r7, #1
			TFT_FillScreen((uint16_t)HAL_RNG_GetRandomNumber(&hrng));
 8001c7a:	4620      	mov	r0, r4
 8001c7c:	f7ff fd9e 	bl	80017bc <HAL_RNG_GetRandomNumber>
 8001c80:	b2bf      	uxth	r7, r7
 8001c82:	b280      	uxth	r0, r0
 8001c84:	f7ff fdaa 	bl	80017dc <TFT_FillScreen>
			HAL_Delay(100);
 8001c88:	2064      	movs	r0, #100	; 0x64
 8001c8a:	f7fe fc87 	bl	800059c <HAL_Delay>
		for(i=0;i<100;i++)
 8001c8e:	2f00      	cmp	r7, #0
 8001c90:	d1f2      	bne.n	8001c78 <main+0x270>
		TFT_FillScreen(0);
 8001c92:	4638      	mov	r0, r7
		HAL_Delay(1000);
 8001c94:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
		TFT_FillScreen(0);
 8001c98:	f7ff fda0 	bl	80017dc <TFT_FillScreen>
		HAL_Delay(1000);
 8001c9c:	4638      	mov	r0, r7
 8001c9e:	f7fe fc7d 	bl	800059c <HAL_Delay>
 8001ca2:	e017      	b.n	8001cd4 <main+0x2cc>
 8001ca4:	20010000 	.word	0x20010000
 8001ca8:	e000ed00 	.word	0xe000ed00
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40022800 	.word	0x40022800
 8001cb4:	2003fc2c 	.word	0x2003fc2c
 8001cb8:	40022000 	.word	0x40022000
 8001cbc:	40016800 	.word	0x40016800
 8001cc0:	50060800 	.word	0x50060800
 8001cc4:	f0f0f0f1 	.word	0xf0f0f0f1
 8001cc8:	20000028 	.word	0x20000028
 8001ccc:	88888889 	.word	0x88888889
 8001cd0:	2003fcd4 	.word	0x2003fcd4
			TFT_FillRectangle(HAL_RNG_GetRandomNumber(&hrng)%480,
 8001cd4:	4620      	mov	r0, r4
 8001cd6:	3f01      	subs	r7, #1
 8001cd8:	f7ff fd70 	bl	80017bc <HAL_RNG_GetRandomNumber>
 8001cdc:	4680      	mov	r8, r0
												HAL_RNG_GetRandomNumber(&hrng)%272,
 8001cde:	4620      	mov	r0, r4
 8001ce0:	b2bf      	uxth	r7, r7
 8001ce2:	f7ff fd6b 	bl	80017bc <HAL_RNG_GetRandomNumber>
 8001ce6:	4681      	mov	r9, r0
												HAL_RNG_GetRandomNumber(&hrng)%480,
 8001ce8:	4620      	mov	r0, r4
 8001cea:	f7ff fd67 	bl	80017bc <HAL_RNG_GetRandomNumber>
 8001cee:	4682      	mov	sl, r0
												HAL_RNG_GetRandomNumber(&hrng)%272,
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	f7ff fd63 	bl	80017bc <HAL_RNG_GetRandomNumber>
 8001cf6:	4683      	mov	fp, r0
												(uint16_t)HAL_RNG_GetRandomNumber(&hrng));
 8001cf8:	4620      	mov	r0, r4
 8001cfa:	f7ff fd5f 	bl	80017bc <HAL_RNG_GetRandomNumber>
												HAL_RNG_GetRandomNumber(&hrng)%272,
 8001cfe:	fba6 230b 	umull	r2, r3, r6, fp
			TFT_FillRectangle(HAL_RNG_GetRandomNumber(&hrng)%480,
 8001d02:	fa1f fe80 	uxth.w	lr, r0
												HAL_RNG_GetRandomNumber(&hrng)%480,
 8001d06:	fba5 120a 	umull	r1, r2, r5, sl
												HAL_RNG_GetRandomNumber(&hrng)%272,
 8001d0a:	fba6 0109 	umull	r0, r1, r6, r9
												HAL_RNG_GetRandomNumber(&hrng)%272,
 8001d0e:	0a1b      	lsrs	r3, r3, #8
			TFT_FillRectangle(HAL_RNG_GetRandomNumber(&hrng)%480,
 8001d10:	fba5 c008 	umull	ip, r0, r5, r8
												HAL_RNG_GetRandomNumber(&hrng)%480,
 8001d14:	0a12      	lsrs	r2, r2, #8
												HAL_RNG_GetRandomNumber(&hrng)%272,
 8001d16:	0a09      	lsrs	r1, r1, #8
			TFT_FillRectangle(HAL_RNG_GetRandomNumber(&hrng)%480,
 8001d18:	f8cd e000 	str.w	lr, [sp]
 8001d1c:	0a00      	lsrs	r0, r0, #8
												HAL_RNG_GetRandomNumber(&hrng)%272,
 8001d1e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
												HAL_RNG_GetRandomNumber(&hrng)%480,
 8001d22:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
												HAL_RNG_GetRandomNumber(&hrng)%272,
 8001d26:	eb01 1101 	add.w	r1, r1, r1, lsl #4
			TFT_FillRectangle(HAL_RNG_GetRandomNumber(&hrng)%480,
 8001d2a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
												HAL_RNG_GetRandomNumber(&hrng)%272,
 8001d2e:	ebab 1303 	sub.w	r3, fp, r3, lsl #4
												HAL_RNG_GetRandomNumber(&hrng)%480,
 8001d32:	ebaa 1242 	sub.w	r2, sl, r2, lsl #5
												HAL_RNG_GetRandomNumber(&hrng)%272,
 8001d36:	eba9 1101 	sub.w	r1, r9, r1, lsl #4
			TFT_FillRectangle(HAL_RNG_GetRandomNumber(&hrng)%480,
 8001d3a:	eba8 1040 	sub.w	r0, r8, r0, lsl #5
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	b292      	uxth	r2, r2
 8001d42:	b289      	uxth	r1, r1
 8001d44:	b280      	uxth	r0, r0
 8001d46:	f7ff fd5b 	bl	8001800 <TFT_FillRectangle>
			HAL_Delay(10);
 8001d4a:	200a      	movs	r0, #10
 8001d4c:	f7fe fc26 	bl	800059c <HAL_Delay>
		for(i=0;i<1000;i++)
 8001d50:	2f00      	cmp	r7, #0
 8001d52:	d1bf      	bne.n	8001cd4 <main+0x2cc>
		TFT_FillScreen(0);
 8001d54:	4638      	mov	r0, r7
		HAL_Delay(1000);
 8001d56:	f242 7a10 	movw	sl, #10000	; 0x2710
		TFT_FillScreen(0);
 8001d5a:	f7ff fd3f 	bl	80017dc <TFT_FillScreen>
		HAL_Delay(1000);
 8001d5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d62:	f7fe fc1b 	bl	800059c <HAL_Delay>
		HAL_Delay(1000);
 8001d66:	2764      	movs	r7, #100	; 0x64
				TFT_DrawPixel(HAL_RNG_GetRandomNumber(&hrng)%480,
 8001d68:	4620      	mov	r0, r4
 8001d6a:	f107 38ff 	add.w	r8, r7, #4294967295	; 0xffffffff
 8001d6e:	f7ff fd25 	bl	80017bc <HAL_RNG_GetRandomNumber>
 8001d72:	4681      	mov	r9, r0
												HAL_RNG_GetRandomNumber(&hrng)%272,0);
 8001d74:	4620      	mov	r0, r4
 8001d76:	fa1f f788 	uxth.w	r7, r8
 8001d7a:	f7ff fd1f 	bl	80017bc <HAL_RNG_GetRandomNumber>
				TFT_DrawPixel(HAL_RNG_GetRandomNumber(&hrng)%480,
 8001d7e:	fba5 2309 	umull	r2, r3, r5, r9
												HAL_RNG_GetRandomNumber(&hrng)%272,0);
 8001d82:	fba6 e100 	umull	lr, r1, r6, r0
				TFT_DrawPixel(HAL_RNG_GetRandomNumber(&hrng)%480,
 8001d86:	2200      	movs	r2, #0
 8001d88:	0a1b      	lsrs	r3, r3, #8
												HAL_RNG_GetRandomNumber(&hrng)%272,0);
 8001d8a:	0a09      	lsrs	r1, r1, #8
				TFT_DrawPixel(HAL_RNG_GetRandomNumber(&hrng)%480,
 8001d8c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
												HAL_RNG_GetRandomNumber(&hrng)%272,0);
 8001d90:	eb01 1101 	add.w	r1, r1, r1, lsl #4
				TFT_DrawPixel(HAL_RNG_GetRandomNumber(&hrng)%480,
 8001d94:	eba9 1343 	sub.w	r3, r9, r3, lsl #5
												HAL_RNG_GetRandomNumber(&hrng)%272,0);
 8001d98:	eba0 1101 	sub.w	r1, r0, r1, lsl #4
				TFT_DrawPixel(HAL_RNG_GetRandomNumber(&hrng)%480,
 8001d9c:	b298      	uxth	r0, r3
 8001d9e:	b289      	uxth	r1, r1
 8001da0:	f7ff fd58 	bl	8001854 <TFT_DrawPixel>
			for(j=0;j<100;j++)
 8001da4:	2f00      	cmp	r7, #0
 8001da6:	d1df      	bne.n	8001d68 <main+0x360>
			TFT_DrawPixel(HAL_RNG_GetRandomNumber(&hrng)%480,
 8001da8:	4620      	mov	r0, r4
 8001daa:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8001dae:	f7ff fd05 	bl	80017bc <HAL_RNG_GetRandomNumber>
 8001db2:	4680      	mov	r8, r0
												HAL_RNG_GetRandomNumber(&hrng)%272,
 8001db4:	4620      	mov	r0, r4
 8001db6:	fa1f fa87 	uxth.w	sl, r7
 8001dba:	f7ff fcff 	bl	80017bc <HAL_RNG_GetRandomNumber>
 8001dbe:	4681      	mov	r9, r0
												(uint16_t)HAL_RNG_GetRandomNumber(&hrng));
 8001dc0:	4620      	mov	r0, r4
 8001dc2:	f7ff fcfb 	bl	80017bc <HAL_RNG_GetRandomNumber>
												HAL_RNG_GetRandomNumber(&hrng)%272,
 8001dc6:	fba6 3109 	umull	r3, r1, r6, r9
			TFT_DrawPixel(HAL_RNG_GetRandomNumber(&hrng)%480,
 8001dca:	fba5 2308 	umull	r2, r3, r5, r8
 8001dce:	b282      	uxth	r2, r0
												HAL_RNG_GetRandomNumber(&hrng)%272,
 8001dd0:	0a09      	lsrs	r1, r1, #8
			TFT_DrawPixel(HAL_RNG_GetRandomNumber(&hrng)%480,
 8001dd2:	0a1b      	lsrs	r3, r3, #8
												HAL_RNG_GetRandomNumber(&hrng)%272,
 8001dd4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
			TFT_DrawPixel(HAL_RNG_GetRandomNumber(&hrng)%480,
 8001dd8:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
												HAL_RNG_GetRandomNumber(&hrng)%272,
 8001ddc:	eba9 1101 	sub.w	r1, r9, r1, lsl #4
			TFT_DrawPixel(HAL_RNG_GetRandomNumber(&hrng)%480,
 8001de0:	eba8 1343 	sub.w	r3, r8, r3, lsl #5
 8001de4:	b289      	uxth	r1, r1
 8001de6:	b298      	uxth	r0, r3
 8001de8:	f7ff fd34 	bl	8001854 <TFT_DrawPixel>
			HAL_Delay(1);
 8001dec:	2001      	movs	r0, #1
 8001dee:	f7fe fbd5 	bl	800059c <HAL_Delay>
		for(i=0;i<10000;i++)
 8001df2:	f1ba 0f00 	cmp.w	sl, #0
 8001df6:	d1b6      	bne.n	8001d66 <main+0x35e>
		HAL_Delay(1000);
 8001df8:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
		TFT_FillScreen(0);
 8001dfc:	4650      	mov	r0, sl
 8001dfe:	f7ff fced 	bl	80017dc <TFT_FillScreen>
		HAL_Delay(1000);
 8001e02:	4638      	mov	r0, r7
 8001e04:	f7fe fbca 	bl	800059c <HAL_Delay>
			TFT_DrawLine(HAL_RNG_GetRandomNumber(&hrng)%480,
 8001e08:	4620      	mov	r0, r4
 8001e0a:	3f01      	subs	r7, #1
 8001e0c:	f7ff fcd6 	bl	80017bc <HAL_RNG_GetRandomNumber>
 8001e10:	4680      	mov	r8, r0
												HAL_RNG_GetRandomNumber(&hrng)%272,
 8001e12:	4620      	mov	r0, r4
 8001e14:	b2bf      	uxth	r7, r7
 8001e16:	f7ff fcd1 	bl	80017bc <HAL_RNG_GetRandomNumber>
 8001e1a:	4681      	mov	r9, r0
												HAL_RNG_GetRandomNumber(&hrng)%480,
 8001e1c:	4620      	mov	r0, r4
 8001e1e:	f7ff fccd 	bl	80017bc <HAL_RNG_GetRandomNumber>
 8001e22:	4682      	mov	sl, r0
												HAL_RNG_GetRandomNumber(&hrng)%272,
 8001e24:	4620      	mov	r0, r4
 8001e26:	f7ff fcc9 	bl	80017bc <HAL_RNG_GetRandomNumber>
 8001e2a:	4683      	mov	fp, r0
												(uint16_t)HAL_RNG_GetRandomNumber(&hrng));
 8001e2c:	4620      	mov	r0, r4
 8001e2e:	f7ff fcc5 	bl	80017bc <HAL_RNG_GetRandomNumber>
												HAL_RNG_GetRandomNumber(&hrng)%272,
 8001e32:	fba6 230b 	umull	r2, r3, r6, fp
			TFT_DrawLine(HAL_RNG_GetRandomNumber(&hrng)%480,
 8001e36:	fa1f fe80 	uxth.w	lr, r0
												HAL_RNG_GetRandomNumber(&hrng)%480,
 8001e3a:	fba5 120a 	umull	r1, r2, r5, sl
												HAL_RNG_GetRandomNumber(&hrng)%272,
 8001e3e:	fba6 0109 	umull	r0, r1, r6, r9
												HAL_RNG_GetRandomNumber(&hrng)%272,
 8001e42:	0a1b      	lsrs	r3, r3, #8
			TFT_DrawLine(HAL_RNG_GetRandomNumber(&hrng)%480,
 8001e44:	fba5 c008 	umull	ip, r0, r5, r8
												HAL_RNG_GetRandomNumber(&hrng)%480,
 8001e48:	0a12      	lsrs	r2, r2, #8
												HAL_RNG_GetRandomNumber(&hrng)%272,
 8001e4a:	0a09      	lsrs	r1, r1, #8
			TFT_DrawLine(HAL_RNG_GetRandomNumber(&hrng)%480,
 8001e4c:	f8cd e000 	str.w	lr, [sp]
 8001e50:	0a00      	lsrs	r0, r0, #8
												HAL_RNG_GetRandomNumber(&hrng)%272,
 8001e52:	eb03 1303 	add.w	r3, r3, r3, lsl #4
												HAL_RNG_GetRandomNumber(&hrng)%480,
 8001e56:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
												HAL_RNG_GetRandomNumber(&hrng)%272,
 8001e5a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
			TFT_DrawLine(HAL_RNG_GetRandomNumber(&hrng)%480,
 8001e5e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
												HAL_RNG_GetRandomNumber(&hrng)%272,
 8001e62:	ebab 1303 	sub.w	r3, fp, r3, lsl #4
												HAL_RNG_GetRandomNumber(&hrng)%480,
 8001e66:	ebaa 1242 	sub.w	r2, sl, r2, lsl #5
												HAL_RNG_GetRandomNumber(&hrng)%272,
 8001e6a:	eba9 1101 	sub.w	r1, r9, r1, lsl #4
			TFT_DrawLine(HAL_RNG_GetRandomNumber(&hrng)%480,
 8001e6e:	eba8 1040 	sub.w	r0, r8, r0, lsl #5
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	b292      	uxth	r2, r2
 8001e76:	b289      	uxth	r1, r1
 8001e78:	b280      	uxth	r0, r0
 8001e7a:	f7ff fcf9 	bl	8001870 <TFT_DrawLine>
			HAL_Delay(10);
 8001e7e:	200a      	movs	r0, #10
 8001e80:	f7fe fb8c 	bl	800059c <HAL_Delay>
		for(i=0;i<1000;i++)
 8001e84:	2f00      	cmp	r7, #0
 8001e86:	d1bf      	bne.n	8001e08 <main+0x400>
		TFT_FillScreen(0);
 8001e88:	4638      	mov	r0, r7
 8001e8a:	f7ff fca7 	bl	80017dc <TFT_FillScreen>
		HAL_Delay(1000);
 8001e8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e92:	f7fe fb83 	bl	800059c <HAL_Delay>
		for(i=0;i<100;i++)
 8001e96:	e6ee      	b.n	8001c76 <main+0x26e>

08001e98 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e98:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <HAL_MspInit+0x2c>)
{
 8001e9a:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e9e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ea2:	641a      	str	r2, [r3, #64]	; 0x40
 8001ea4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ea6:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001eaa:	9200      	str	r2, [sp, #0]
 8001eac:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001eb0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001eb4:	645a      	str	r2, [r3, #68]	; 0x44
 8001eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ebc:	9301      	str	r3, [sp, #4]
 8001ebe:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ec0:	b002      	add	sp, #8
 8001ec2:	4770      	bx	lr
 8001ec4:	40023800 	.word	0x40023800

08001ec8 <HAL_LTDC_MspInit>:
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hltdc->Instance==LTDC)
 8001ec8:	6802      	ldr	r2, [r0, #0]
 8001eca:	4b3e      	ldr	r3, [pc, #248]	; (8001fc4 <HAL_LTDC_MspInit+0xfc>)
{
 8001ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hltdc->Instance==LTDC)
 8001ece:	429a      	cmp	r2, r3
{
 8001ed0:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed2:	f04f 0400 	mov.w	r4, #0
 8001ed6:	9408      	str	r4, [sp, #32]
 8001ed8:	9407      	str	r4, [sp, #28]
 8001eda:	9409      	str	r4, [sp, #36]	; 0x24
 8001edc:	940a      	str	r4, [sp, #40]	; 0x28
 8001ede:	940b      	str	r4, [sp, #44]	; 0x2c
  if(hltdc->Instance==LTDC)
 8001ee0:	d001      	beq.n	8001ee6 <HAL_LTDC_MspInit+0x1e>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001ee2:	b00d      	add	sp, #52	; 0x34
 8001ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001ee6:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001eea:	2710      	movs	r7, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eec:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001eee:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001ef0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ef2:	a907      	add	r1, sp, #28
 8001ef4:	4834      	ldr	r0, [pc, #208]	; (8001fc8 <HAL_LTDC_MspInit+0x100>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001ef6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001efa:	645a      	str	r2, [r3, #68]	; 0x44
 8001efc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001efe:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8001f02:	9201      	str	r2, [sp, #4]
 8001f04:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f08:	433a      	orrs	r2, r7
 8001f0a:	631a      	str	r2, [r3, #48]	; 0x30
 8001f0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f0e:	403a      	ands	r2, r7
 8001f10:	9202      	str	r2, [sp, #8]
 8001f12:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001f14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f1a:	631a      	str	r2, [r3, #48]	; 0x30
 8001f1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f1e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001f22:	9203      	str	r2, [sp, #12]
 8001f24:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001f26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f2c:	631a      	str	r2, [r3, #48]	; 0x30
 8001f2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f30:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001f34:	9204      	str	r2, [sp, #16]
 8001f36:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f3e:	631a      	str	r2, [r3, #48]	; 0x30
 8001f40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f42:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001f46:	9205      	str	r2, [sp, #20]
 8001f48:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001f4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f50:	631a      	str	r2, [r3, #48]	; 0x30
 8001f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f54:	9707      	str	r7, [sp, #28]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5a:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001f5c:	9306      	str	r3, [sp, #24]
 8001f5e:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f60:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f62:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f64:	f7fe fbde 	bl	8000724 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11 
 8001f68:	f64e 73ff 	movw	r3, #61439	; 0xefff
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001f6c:	a907      	add	r1, sp, #28
 8001f6e:	4817      	ldr	r0, [pc, #92]	; (8001fcc <HAL_LTDC_MspInit+0x104>)
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11 
 8001f70:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f74:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f76:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001f7a:	f7fe fbd3 	bl	8000724 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4 
 8001f7e:	23f7      	movs	r3, #247	; 0xf7
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001f80:	a907      	add	r1, sp, #28
 8001f82:	4813      	ldr	r0, [pc, #76]	; (8001fd0 <HAL_LTDC_MspInit+0x108>)
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4 
 8001f84:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f86:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f88:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f8a:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001f8e:	f7fe fbc9 	bl	8000724 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001f96:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f98:	a907      	add	r1, sp, #28
 8001f9a:	480e      	ldr	r0, [pc, #56]	; (8001fd4 <HAL_LTDC_MspInit+0x10c>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f9c:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001f9e:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa0:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fa2:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fa6:	f7fe fbbd 	bl	8000724 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 8001faa:	f44f 4346 	mov.w	r3, #50688	; 0xc600
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001fae:	a907      	add	r1, sp, #28
 8001fb0:	4809      	ldr	r0, [pc, #36]	; (8001fd8 <HAL_LTDC_MspInit+0x110>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001fb2:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb4:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fb6:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 8001fba:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001fbc:	f7fe fbb2 	bl	8000724 <HAL_GPIO_Init>
}
 8001fc0:	b00d      	add	sp, #52	; 0x34
 8001fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fc4:	40016800 	.word	0x40016800
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40022400 	.word	0x40022400
 8001fd0:	40022800 	.word	0x40022800
 8001fd4:	40021800 	.word	0x40021800
 8001fd8:	40022000 	.word	0x40022000

08001fdc <HAL_RNG_MspInit>:
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 8001fdc:	6802      	ldr	r2, [r0, #0]
 8001fde:	4b08      	ldr	r3, [pc, #32]	; (8002000 <HAL_RNG_MspInit+0x24>)
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d000      	beq.n	8001fe6 <HAL_RNG_MspInit+0xa>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001fe4:	4770      	bx	lr
    __HAL_RCC_RNG_CLK_ENABLE();
 8001fe6:	4b07      	ldr	r3, [pc, #28]	; (8002004 <HAL_RNG_MspInit+0x28>)
{
 8001fe8:	b082      	sub	sp, #8
    __HAL_RCC_RNG_CLK_ENABLE();
 8001fea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ff0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff8:	9301      	str	r3, [sp, #4]
 8001ffa:	9b01      	ldr	r3, [sp, #4]
}
 8001ffc:	b002      	add	sp, #8
 8001ffe:	4770      	bx	lr
 8002000:	50060800 	.word	0x50060800
 8002004:	40023800 	.word	0x40023800

08002008 <NMI_Handler>:
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop

0800200c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800200c:	e7fe      	b.n	800200c <HardFault_Handler>
 800200e:	bf00      	nop

08002010 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002010:	e7fe      	b.n	8002010 <MemManage_Handler>
 8002012:	bf00      	nop

08002014 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002014:	e7fe      	b.n	8002014 <BusFault_Handler>
 8002016:	bf00      	nop

08002018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002018:	e7fe      	b.n	8002018 <UsageFault_Handler>
 800201a:	bf00      	nop

0800201c <SVC_Handler>:
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop

08002020 <DebugMon_Handler>:
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop

08002024 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop

08002028 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002028:	f7fe baa6 	b.w	8000578 <HAL_IncTick>

0800202c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800202c:	4a0f      	ldr	r2, [pc, #60]	; (800206c <SystemInit+0x40>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800202e:	4b10      	ldr	r3, [pc, #64]	; (8002070 <SystemInit+0x44>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002030:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002034:	490f      	ldr	r1, [pc, #60]	; (8002074 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002036:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
{
 800203a:	b470      	push	{r4, r5, r6}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800203c:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
  RCC->CFGR = 0x00000000;
 8002040:	2400      	movs	r4, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002042:	6818      	ldr	r0, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002044:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
  RCC->PLLCFGR = 0x24003010;
 8002048:	4e0b      	ldr	r6, [pc, #44]	; (8002078 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001;
 800204a:	f040 0001 	orr.w	r0, r0, #1
 800204e:	6018      	str	r0, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002050:	609c      	str	r4, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002052:	6818      	ldr	r0, [r3, #0]
 8002054:	4001      	ands	r1, r0
 8002056:	6019      	str	r1, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 8002058:	605e      	str	r6, [r3, #4]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800205a:	6819      	ldr	r1, [r3, #0]
 800205c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8002060:	6019      	str	r1, [r3, #0]
  RCC->CIR = 0x00000000;
 8002062:	60dc      	str	r4, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002064:	6095      	str	r5, [r2, #8]
#endif
}
 8002066:	bc70      	pop	{r4, r5, r6}
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	e000ed00 	.word	0xe000ed00
 8002070:	40023800 	.word	0x40023800
 8002074:	fef6ffff 	.word	0xfef6ffff
 8002078:	24003010 	.word	0x24003010

0800207c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800207c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020b4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002080:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002082:	e003      	b.n	800208c <LoopCopyDataInit>

08002084 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002084:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002086:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002088:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800208a:	3104      	adds	r1, #4

0800208c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800208c:	480b      	ldr	r0, [pc, #44]	; (80020bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800208e:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002090:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002092:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002094:	d3f6      	bcc.n	8002084 <CopyDataInit>
  ldr  r2, =_sbss
 8002096:	4a0b      	ldr	r2, [pc, #44]	; (80020c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002098:	e002      	b.n	80020a0 <LoopFillZerobss>

0800209a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800209a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800209c:	f842 3b04 	str.w	r3, [r2], #4

080020a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80020a0:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80020a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80020a4:	d3f9      	bcc.n	800209a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020a6:	f7ff ffc1 	bl	800202c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020aa:	f000 f811 	bl	80020d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ae:	f7ff fcab 	bl	8001a08 <main>
  bx  lr    
 80020b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020b4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80020b8:	08002160 	.word	0x08002160
  ldr  r0, =_sdata
 80020bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80020c0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80020c4:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80020c8:	2003fce4 	.word	0x2003fce4

080020cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020cc:	e7fe      	b.n	80020cc <ADC_IRQHandler>
	...

080020d0 <__libc_init_array>:
 80020d0:	b570      	push	{r4, r5, r6, lr}
 80020d2:	4e0d      	ldr	r6, [pc, #52]	; (8002108 <__libc_init_array+0x38>)
 80020d4:	4c0d      	ldr	r4, [pc, #52]	; (800210c <__libc_init_array+0x3c>)
 80020d6:	1ba4      	subs	r4, r4, r6
 80020d8:	10a4      	asrs	r4, r4, #2
 80020da:	2500      	movs	r5, #0
 80020dc:	42a5      	cmp	r5, r4
 80020de:	d109      	bne.n	80020f4 <__libc_init_array+0x24>
 80020e0:	4e0b      	ldr	r6, [pc, #44]	; (8002110 <__libc_init_array+0x40>)
 80020e2:	4c0c      	ldr	r4, [pc, #48]	; (8002114 <__libc_init_array+0x44>)
 80020e4:	f000 f820 	bl	8002128 <_init>
 80020e8:	1ba4      	subs	r4, r4, r6
 80020ea:	10a4      	asrs	r4, r4, #2
 80020ec:	2500      	movs	r5, #0
 80020ee:	42a5      	cmp	r5, r4
 80020f0:	d105      	bne.n	80020fe <__libc_init_array+0x2e>
 80020f2:	bd70      	pop	{r4, r5, r6, pc}
 80020f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020f8:	4798      	blx	r3
 80020fa:	3501      	adds	r5, #1
 80020fc:	e7ee      	b.n	80020dc <__libc_init_array+0xc>
 80020fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002102:	4798      	blx	r3
 8002104:	3501      	adds	r5, #1
 8002106:	e7f2      	b.n	80020ee <__libc_init_array+0x1e>
 8002108:	08002158 	.word	0x08002158
 800210c:	08002158 	.word	0x08002158
 8002110:	08002158 	.word	0x08002158
 8002114:	0800215c 	.word	0x0800215c

08002118 <memset>:
 8002118:	4402      	add	r2, r0
 800211a:	4603      	mov	r3, r0
 800211c:	4293      	cmp	r3, r2
 800211e:	d100      	bne.n	8002122 <memset+0xa>
 8002120:	4770      	bx	lr
 8002122:	f803 1b01 	strb.w	r1, [r3], #1
 8002126:	e7f9      	b.n	800211c <memset+0x4>

08002128 <_init>:
 8002128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800212a:	bf00      	nop
 800212c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800212e:	bc08      	pop	{r3}
 8002130:	469e      	mov	lr, r3
 8002132:	4770      	bx	lr

08002134 <_fini>:
 8002134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002136:	bf00      	nop
 8002138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800213a:	bc08      	pop	{r3}
 800213c:	469e      	mov	lr, r3
 800213e:	4770      	bx	lr
